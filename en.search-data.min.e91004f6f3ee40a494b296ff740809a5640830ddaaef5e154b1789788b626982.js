'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/docs/profile/',title:"소개 Introduction",section:"Docs",content:"This is a blog.\r#\r\rI love this steep slope (not downward :P)\nThank you.\nFramework: Hugo\nOriginal Theme: Book\n\r​	Hugo\n​	Github Page | Hugo Page\n\r\r"}),a.add({id:1,href:'/docs/example/',title:"Example Site",section:"Docs",content:"Introduction\r#\r\rFerre hinnitibus erat accipitrem dixi Troiae tollens\r#\r\rLorem markdownum, a quoque nutu est quodcumque mandasset veluti. Passim inportuna totidemque nympha fert; repetens pendent, poenarum guttura sed vacet non, mortali undas. Omnis pharetramque gramen portentificisque membris servatum novabis fallit de nubibus atque silvas mihi. Dixit repetitaque Quid; verrit longa; sententia mandat quascumque nescio solebat litore; noctes. Hostem haerentem circuit plenaque tamen.\n Pedum ne indigenae finire invergens carpebat Velit posses summoque De fumos illa foret  Est simul fameque tauri qua ad\r#\r\rLocum nullus nisi vomentes. Ab Persea sermone vela, miratur aratro; eandem Argolicas gener.\nMe sol\r#\r\rNec dis certa fuit socer, Nonacria dies manet tacitaque sibi? Sucis est iactata Castrumque iudex, et iactato quoque terraeque es tandem et maternos vittis. Lumina litus bene poenamque animos callem ne tuas in leones illam dea cadunt genus, et pleno nunc in quod. Anumque crescentesque sanguinis progenies nuribus rustica tinguet. Pater omnes liquido creditis noctem.\nif (mirrored(icmp_dvd_pim, 3, smbMirroredHard) != lion(clickImportQueue,\rviralItunesBalancing, bankruptcy_file_pptp)) {\rfile += ip_cybercrime_suffix;\r}\rif (runtimeSmartRom == netMarketingWord) {\rvirusBalancingWin *= scriptPromptBespoke + raster(post_drive,\rwindowsSli);\rcd = address_hertz_trojan;\rsoap_ccd.pcbServerGigahertz(asp_hardware_isa, offlinePeopleware, nui);\r} else {\rmegabyte.api = modem_flowchart - web + syntaxHalftoneAddress;\r}\rif (3 \u0026lt; mebibyteNetworkAnimated) {\rpharming_regular_error *= jsp_ribbon + algorithm * recycleMediaKindle(\rdvrSyntax, cdma);\radf_sla *= hoverCropDrive;\rtemplateNtfs = -1 - vertical;\r} else {\rexpressionCompressionVariable.bootMulti = white_eup_javascript(\rtable_suffix);\rguidPpiPram.tracerouteLinux += rtfTerabyteQuicktime(1,\rmanagementRosetta(webcamActivex), 740874);\r}\rvar virusTweetSsl = nullGigo;\r Trepident sitimque\r#\r\rSentiet et ferali errorem fessam, coercet superbus, Ascaniumque in pennis mediis; dolor? Vidit imi Aeacon perfida propositos adde, tua Somni Fluctibus errante lustrat non.\nTamen inde, vos videt e flammis Scythica parantem rupisque pectora umbras. Haec ficta canistris repercusso simul ego aris Dixit! Esse Fama trepidare hunc crescendo vigor ululasse vertice exspatiantur celer tepidique petita aversata oculis iussa est me ferro.\n"}),a.add({id:2,href:'/docs/example/table-of-contents/with-toc/',title:"With ToC",section:"Table of Contents",content:"Caput vino delphine in tamen vias\r#\r\rCognita laeva illo fracta\r#\r\rLorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere\r#\r\rPectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit\r#\r\rAurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua\r#\r\rIuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta\r#\r\rMortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"}),a.add({id:3,href:'/docs/example/table-of-contents/without-toc/',title:"Without ToC",section:"Table of Contents",content:"At me ipso nepotibus nunc celebratior genus\r#\r\rTanto oblite\r#\r\rLorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius\r#\r\rQuibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae\r#\r\rCredulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"}),a.add({id:4,href:'/docs/develope/',title:"개발 기록 Developer Note",section:"Docs",content:"글 목록 List\r#\r\r"}),a.add({id:5,href:'/docs/paper/',title:"아무논문 Paper Review",section:"Docs",content:"글 목록 List\r#\r\r"}),a.add({id:6,href:'/docs/book/',title:"독후감 Book Review",section:"Docs",content:"글 목록 List\r#\r\r"}),a.add({id:7,href:'/posts/creating-a-new-theme/',title:"Creating a New Theme",section:"Blog",content:"Introduction\r#\r\rThis tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment\r$ echo this is a command\rthis is a command\r## edit the file\r$ vi foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r:wq\r## show it\r$ cat foo.md\r+++\rdate = \u0026quot;2014-09-28\u0026quot;\rtitle = \u0026quot;creating a new theme\u0026quot;\r+++\rbah and humbug\r$\rSome Definitions\r#\r\rThere are a few concepts that you need to understand before creating a theme.\nSkins\r#\r\rSkins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page\r#\r\rThe home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File\r#\r\rWhen Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent\r#\r\rContent is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter\r#\r\rThe front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown\r#\r\rContent is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files\r#\r\rHugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template\r#\r\rA single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template\r#\r\rA list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template\r#\r\rA partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site\r#\r\rLet\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta\r$ cd ~/Sites/zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 7 quoha staff 238 Sep 29 16:49 .\rdrwxr-xr-x 3 quoha staff 102 Sep 29 16:49 ..\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rTake a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site\r#\r\rRunning the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\r$\rSee that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public\rtotal 16\r-rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml\r-rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml\r$ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site\r#\r\rVerify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rConnect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml\rsitemap.xml\rThat\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rWARN: 2014/09/29 Unable to locate layout: [404.html]\rThat second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme\r#\r\rHugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton\r#\r\rUse the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta\r$ ls -l\rtotal 8\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes\r-rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public\rdrwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes\r$ find themes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r-rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml\r$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml\rauthor = \u0026quot;michael d henderson\u0026quot;\rdescription = \u0026quot;a minimal working template\u0026quot;\rlicense = \u0026quot;MIT\u0026quot;\rname = \u0026quot;zafta\u0026quot;\rsource_repo = \u0026quot;\u0026quot;\rtags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;]\r:wq\r## also edit themes/zafta/LICENSE.md and change\r## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;\rNote that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html\r$\rUpdate the Configuration File to Use the Theme\r#\r\rNow that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml\rtheme = \u0026quot;zafta\u0026quot;\rbaseurl = \u0026quot;\u0026quot;\rlanguageCode = \u0026quot;en-us\u0026quot;\rtitle = \u0026quot;zafta - totally refreshing\u0026quot;\rMetaDataFormat = \u0026quot;toml\u0026quot;\r:wq\r$\rGenerate the Site\r#\r\rNow that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$\rDid you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public\rtotal 16\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html\r-rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js\r-rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml\r$\rNotice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page\r#\r\rHugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]\rIf it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html\r$ The Magic of Static\r#\r\rHugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld\rdrwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta\rdrwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes\rdrwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials\rdrwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css\rdrwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js\r$ The Theme Development Cycle\r#\r\rWhen you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory\r#\r\rWhen generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option\r#\r\rHugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload\r#\r\rHugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands\r#\r\rUse the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory.\r##\r$ rm -rf public\r##\r## run hugo in watch mode\r##\r$ hugo server --watch --verbose\rHere\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public\r$ hugo server --watch --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\rWatching for changes in /Users/quoha/Sites/zafta/content\rServing pages from /Users/quoha/Sites/zafta/public\rWeb Server is available at http://localhost:1313\rPress Ctrl+C to stop\rINFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB]\rChange detected, rebuilding site\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 1 ms\rUpdate the Home Page Template\r#\r\rThe home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page\r#\r\rRight now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq\r$\rBuild the web site and then verify the results.\n$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 0 pages created 0 tags created\r0 categories created\rin 2 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;\rLive Reload\r#\r\rNote: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;\rWhen you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page\r#\r\r\u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts\r#\r\rNow that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md\rERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{}\r$ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md\r+++\rDescription = \u0026quot;\u0026quot;\rTags = []\rCategories = []\r+++\r:wq\r$ find themes/zafta/archetypes -type f | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md\r-rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md\r$ hugo --verbose new post/first.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/first.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md\r/Users/quoha/Sites/zafta/content/post/first.md created\r$ hugo --verbose new post/second.md\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 attempting to create post/second.md of post\rINFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md\rINFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md\r/Users/quoha/Sites/zafta/content/post/second.md created\r$ ls -l content/post\rtotal 16\r-rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md\r-rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md\r$ cat content/post/first.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot;\rtitle = \u0026quot;first\u0026quot;\r+++\rmy first post\r$ cat content/post/second.md +++\rCategories = []\rDescription = \u0026quot;\u0026quot;\rTags = []\rdate = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot;\rtitle = \u0026quot;second\u0026quot;\r+++\rmy second post\r$ Build the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$\rThe output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html\r$\rThe new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates\r#\r\rIn Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage\r#\r\rThe home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rHugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCongratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts\r#\r\rWe\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html\rWe could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File\r#\r\r$ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\r$\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html\r$ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt;\r\u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rNotice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content\r#\r\rThe posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r{{ range first 10 .Data.Pages }}\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rBuild the web site and verify the results.\n$ rm -rf public\r$ hugo --verbose\rINFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/\rINFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;}\rWARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]\r0 draft content 0 future content 2 pages created 0 tags created\r0 categories created\rin 4 ms\r$ find public -type f -name '*.html' | xargs ls -l\r-rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html\r-rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html\r-rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html\r-rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html\r$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r$\rCreate a Post Listing\r#\r\rWe have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l\r-rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html\rAs with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages\r#\r\rLet\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++\rtitle = \u0026quot;about\u0026quot;\rdescription = \u0026quot;about this site\u0026quot;\rdate = \u0026quot;2014-09-27\u0026quot;\rslug = \u0026quot;about time\u0026quot;\r+++\r## about us\ri'm speechless\r:wq\rGenerate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html\rNotice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\r\u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://'\r+ (location.host || 'localhost').split(':')[0]\r+ ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/'\r+ 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rNotice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if eq .Type \u0026quot;page\u0026quot; }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rGenerate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l\r-rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html\r-rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html\r-rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html\r-rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html\r-rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html\rKnowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml\r[permalinks]\rpage = \u0026quot;/:title/\u0026quot;\rabout = \u0026quot;/:filename/\u0026quot;\rGenerate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates\r#\r\rIf you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials\r#\r\rIn Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html\r\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r:wq\r$ vi themes/zafta/layouts/partials/footer.html\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\r:wq\rUpdate the Home Page Template to Use the Partials\r#\r\rThe most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}\rversus\n{{ partial \u0026quot;header.html\u0026quot; . }}\rBoth pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt;\r{{ range first 10 .Data.Pages }}\r{{ if eq .Type \u0026quot;post\u0026quot;}}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt;\r{{ range .Data.Pages }}\r{{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }}\r\u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt;\r{{ end }}\r{{ end }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials\r#\r\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts\r#\r\rIt\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template\r#\r\rWe\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\rPosts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rGenerate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post\r$ vi themes/zafta/layouts/_default/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNow we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html\r{{ partial \u0026quot;header.html\u0026quot; . }}\r\u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt;\r\u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt;\r{{ .Content }}\r{{ partial \u0026quot;footer.html\u0026quot; . }}\r:wq\rNote that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself\r#\r\rDRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"}),a.add({id:8,href:'/posts/migrate-from-jekyll/',title:"Migrate to Hugo from Jekyll",section:"Blog",content:"Move static content to static\r#\r\rJekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/\r▾ images/\rlogo.png\r should become\n▾ \u0026lt;root\u0026gt;/\r▾ static/\r▾ images/\rlogo.png\r Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file\r#\r\rHugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site\r#\r\rThe default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site\rgit rm _site\rgit submodule add -b gh-pages git@github.com:your-username/your-repo.git public\r   Or, change the Hugo configuration to use _site instead of public.\n {\r..\r\u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;,\r..\r}\r   Convert Jekyll templates to Hugo templates\r#\r\rThat\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes\r#\r\rJekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation\r#\r\rAs an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll\rclass ImageTag \u0026lt; Liquid::Tag\r@url = nil\r@caption = nil\r@class = nil\r@link = nil\r// Patterns\rIMAGE_URL_WITH_CLASS_AND_CAPTION =\rIMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i\rIMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i\rIMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i\rIMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i\rdef initialize(tag_name, markup, tokens)\rsuper\rif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK\r@class = $1\r@url = $3\r@caption = $7\r@link = $9\relsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION\r@class = $1\r@url = $3\r@caption = $7\relsif markup =~ IMAGE_URL_WITH_CAPTION\r@url = $1\r@caption = $5\relsif markup =~ IMAGE_URL_WITH_CLASS\r@class = $1\r@url = $3\relsif markup =~ IMAGE_URL\r@url = $1\rend\rend\rdef render(context)\rif @class\rsource = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot;\relse\rsource = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot;\rend\rif @link\rsource += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot;\rif @link\rsource += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot;\rend\rsource += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption\rsource += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot;\rsource\rend\rend\rend\rLiquid::Template.register_tag('image', Jekyll::ImageTag)\r is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt;\r\u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt;\r{{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }}\r\u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt;\r{{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }}\r{{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}}\r\u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }}\r{{ .Get \u0026quot;title\u0026quot; }}{{ end }}\r{{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt;\r{{ .Get \u0026quot;caption\u0026quot; }}\r{{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }}\r{{ .Get \u0026quot;attr\u0026quot; }}\r{{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }}\r\u0026lt;/p\u0026gt; {{ end }}\r\u0026lt;/figcaption\u0026gt;\r{{ end }}\r\u0026lt;/figure\u0026gt;\r\u0026lt;!-- image --\u0026gt;\r Usage\r#\r\rI simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}\r to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}\r As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches\r#\r\rFix content\r#\r\rDepending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up\r#\r\rYou\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff\r#\r\rHey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"}),a.add({id:9,href:'/docs/example/table-of-contents/',title:"Table of Contents",section:"Example Site",content:"Ubi loqui\r#\r\rMentem genus facietque salire tempus bracchia\r#\r\rLorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice\r#\r\rOra precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis\r#\r\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r Placabilis coactis nega ingemuit ignoscat nimia non\r#\r\rFrontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) {\rzif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive;\rgigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop),\rpanel_point_firmware);\rspyware_bash.statePopApplet = express_netbios_digital(\rinsertion_troubleshooting.brouter(recordFolderUs), 65);\r}\rrecursionCoreRay = -5;\rif (hub == non) {\rportBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard),\rfont_radcab, guidCmsScalable + reciprocalMatrixPim);\rleft.bug = screenshot;\r} else {\rtooltipOpacity = raw_process_permalink(webcamFontUser, -1);\rexecutable_router += tape;\r}\rif (tft) {\rbandwidthWeb *= social_page;\r} else {\rregular += 611883;\rthumbnail /= system_lag_keyboard;\r}\r Caesorum illa tu sentit micat vestes papyriferi\r#\r\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"}),a.add({id:10,href:'/docs/develope/210101/',title:"도서 검색 api - 네이버, kakao (+파이썬에서 xml 파싱)",section:"개발 기록 Developer Note",content:"네이버, 카카오 둘 다 도서 검색 api를 제공한다.\nisbn 값을 넣어주면, 책에대한 정보를 서버에 요청하고 받아오는 코드를 작성함.\n결과적으로 카카오껄 썼는데, 이유는 출력값이 json이고 개발자 페이지에서 바로 api를 테스트 해볼 수 있어서.\n그리고 책 정보가 둘다 짤리긴 하는데 카카오가 조금 더 길다\u0026hellip;\n책정보 안짜르고 제공해줄수있을지 문의해봐야겠다.\n카카오: https://developers.kakao.com/docs/latest/ko/daum-search/dev-guide#search-book\n네이버: https://developers.naver.com/docs/search/book/\n둘 다 client key를 발급받아야하는데, 로그인하고 몇가지 정보만 입력하면 바로 발급된다.\n카카오\nimport requests import json \u0026#39;\u0026#39;\u0026#39; curl -X GET \u0026#34;https://dapi.kakao.com/v3/search/book?sort=accuracy\u0026amp;page=1\u0026amp;size=10\u0026amp;target=isbn\u0026amp;query=9791158511982\u0026#34; \\ -H \u0026#34;Authorization: KakaoAK {REST_API_KEY}\u0026#34; \u0026#39;\u0026#39;\u0026#39; isbn=\u0026#39;검색할 책 isbn 값\u0026#39; url=\u0026#39;https://dapi.kakao.com/v3/search/book?sort=accuracy\u0026amp;page=1\u0026amp;size=10\u0026amp;target=isbn\u0026amp;query=\u0026#39;+str(isbn) headers ={\u0026#39;Authorization\u0026#39;: \u0026#39;KakaoAK 여기에키입력\u0026#39; } response = requests.get(url, headers=headers) rawResult = response.text ##응답받은 책정보 str json으로 변환  result=json.loads(rawResult) # result.keys() # dict_keys([\u0026#39;documents\u0026#39;, \u0026#39;meta\u0026#39;]) searchlist=result[\u0026#39;documents\u0026#39;] # searchlist[0].keys() 네이버\nimport requests import lxml.etree headers ={\u0026#39;Host\u0026#39;: \u0026#39;openapi.naver.com\u0026#39;, \u0026#39;User-Agent\u0026#39;: \u0026#39;curl/7.49.1\u0026#39;, \u0026#39;Accept\u0026#39;: \u0026#39;*/*\u0026#39;, \u0026#39;X-Naver-Client-Id\u0026#39;: \u0026#39;발급받은client Id\u0026#39;, \u0026#39;X-Naver-Client-Secret\u0026#39;: \u0026#39;발급받은client secret\u0026#39; } isbn=\u0026#39;검색할 책 isbn 값\u0026#39; url=\u0026#39;https://openapi.naver.com/v1/search/book_adv.xml?d_isbn=\u0026#39;+str(isbn) response = requests.get(url, headers=headers) raw = response.content ## xml 구조 보기위해서 출력 # result = response.content.decode(\u0026#34;utf-8\u0026#34;) # print(result) ## 응답받은 xml string 파싱 root = lxml.etree.fromstring(raw) ## 필요 정보 출력 title = root.find(\u0026#39;channel/item/title\u0026#39;) print (title.text) description = root.find(\u0026#39;channel/item/description\u0026#39;) print (description.text) link = root.find(\u0026#39;channel/item/link\u0026#39;) print (link.text) "}),a.add({id:11,href:'/docs/paper/201004/',title:"The Role of Deliberate Practice in the Acquisition of Expert Performance",section:"아무논문 Paper Review",content:"The Role of Deliberate Practice in the Acquisition of Expert Performance\n 번역하면\n전문 기량 습득에서 deliberate practice의 역할\n정도 되겠다.\n deliberate practice는 \u0026lsquo;의도적/의식적인/신중한 연습\u0026rsquo;정도로 번역되는 듯.\n논문은 여기나\nhttps://psycnet.apa.org/record/1993-40718-001\nor 여기에서 볼 수 있음\nhttps://graphics8.nytimes.com/images/blogs/freakonomics/pdf/DeliberatePractice(PsychologicalReview).pdf\n관심있는 주제의 페이퍼라 읽으려고봤더니 무려 40p라서, 이너넷의 누군가는 요약을 해줬을 것이라 믿고 찾아봤다. 다음은 요약문 원문 주소\nhttp://www.jimdavies.org/summaries/ericsson1993.html\nhttps://blog.vivekhaldar.com/post/3881908748/tldr-summary-the-role-of-deliberate-practice-in\n  분야막론 세계 정상급 퍼포먼스를 낳는 요소를 찾는 것이 연구의 목표.\n  저자는 talent view를 부정. deliberate practice의 중요성을 주장함.\n 천재나 신동의 경우에도 그 능력은 유년기의 교육에서 얻어짐  절대음감도 어릴 때 학습됨 ㅇㅇ 음악의 특정 규칙/전통에 예민한 것을 보면 그들의 능력이 학습된 것이라고 할 수 있음   아주 특출난 performance는 장기간의 intense한 훈련과 준비가 만든 것  20세기 최첨단의 과학적인 발견을 중고등학교에서 가르치는걸 보면 ㅇㅇ      basic ability 측정으로 실제 퍼포먼스를 예측할 수 없다\n 훈련 이전에 측정한 basic ability(재능을 알아보기 위함인 듯)로는 performance를 예측할 수 없었음 롱텀 상관관계가 0.2라고,,    전문가들도 그들의 영역 안에서만 전문가.\n 마이클 조던이 mlb에서는 그저그런 선수였던 것과 같음 ㅇㅇ \u0026ldquo;their gift works only in their own domain\u0026rdquo;    단순한 반복은 한계(plateau)가 있음. 대부분의 사람들은 가장 자주하는 task에서도 최대 퍼포먼스보다 더 낮은 결과를 보임 ㅇㅇ.\n  체소 10년은 제대로 해야 월드클래스급,,\n  세 가지의 활동이 존재함: 일/놀이/신중한 연습\n 일: 외부 motivated. 성과의 꾸준함과 예측가능성이 젤 중요. 성장은 별로 안중요. 놀이: 내부 motivated. 즐거움. 그러나 목표지향적이지 않음. 퍼포먼스를 향상시키는 체계가 아님 ㅇㅇ 신중한 연습: 체계적이고, 노력이 필요함. 대체로 즐겁지 않음. 기량향상의 병목 해소에 초점 ㅇㅇ    신중한 연습의 특성\n 대상의 현재 수준과 약점에 맞춰서 설계됨 즉각적인 피드백이 필요함. 즉각적인 보상은 없음 ㅎㅎ,, \u0026ndash;\u0026gt; 과정은 노잼이라는 소리 새로운 방법을 바로 수행하고 정제하는 과정. 일찍 시작할수록 유리함 ㅇㅇㅇㅇㅇㅇㅇㅇ    강도\n 한계까지 몰아붙임. 개인 능력치의 최대까지.. 이게 일/놀이와 다른 부분    단조함수 (임의의 x,y에 대해 x\u0026lt;=y이면 f(x)\u0026lt;=f(y))\n 젤 중요한 부분 신중한 연습을 통해 plateau를 뛰어넘을 수 있음    휴식도 중요\n 하루에 4시간 이상 하는건 의미가 없음. 하루에 2시간 이상 수행시 효율 떨어짐    단순 개인의 문제 X. 지지하고 응원해주는 환경이 필수적임.\n  Interestingly, Ericsson et al. suggest that motivational factors, which may influence who is willing to engage in extended periods of deliberate practice, may be genetically influenced.\n 노력하는 것(신중한 연습의 기간을 견뎌내는 것)도 어쩌면 재능일지 모른다 ㅋㅋㅋㅋ    나의 생각\n 월드클래스 재능이 있건 없건, 일단 나는 deliberate practice를 하자. ㅇㅇ 생각없이 반복 X. 연습도 신중하게. 피드백 피드백 피드백  "}),a.add({id:12,href:'/docs/develope/200907_google_apps_script_project_booklist/',title:"Booklist using spreadsheet(+Google Apps Script), 구글 스크립트로 작성한 북리스트 자동 관리 프로그램",section:"개발 기록 Developer Note",content:"https://dheonj.github.io/docs/develope/200812/\n여기에서 대충 얘기한 독서리스트 얘기 이어서..\n구글 스프레드시트로 만든 독서 리스트 관리 프로그램 lite 버전.\n다음 링크에서 구경할 수 있음. 이사람은 이런책을 리스트에 담가놨구나.\nhttps://docs.google.com/spreadsheets/d/1bHBjwDHrYAHdpVS6u-1Lsywp4F4aL87wh8mhYNGNBlw/edit?usp=sharing\n본인 드라이브에 복사하면 사용 가능하다.\n읽을 책, 읽은 책 이렇게 두 개의 시트로 구성되어있고, 몇가지 자동 기능이 있음\n  각각의 리스트 맨 위 빈칸에 제목을 입력하면 자동으로 아래 리스트에 추가됨.\n  체크박스를 클릭하면 읽은책 리스트로 옮겨지거나 리스트에서 삭제할 수도 있음.\n  (std 버전 한정) 독후감을 쓸 수 있도록 자동으로 docs 파일을 생성하고 오픈함\n  lite 랑 standard를 나눈 이유는,,\n기본 구글 스프레드시트 trigger에는 드라이브에 파일을 편집할 수 있는 권한이 없기 때문이다.\n권한 설정은 좀 귀찮음.. 이것도 자동화하면 좋은데. 방법은 있겠지만 뭐.\n여튼\n작년 가을쯤 기능만 대충 만들어서 쓰고있다가\n함수 구조가 너무 엉켜있어서 그것좀 풀어내고 (전공자들에게는 아직도 복잡하겠지만)\n인터페이스좀 개선하고 그랬다 ㅇㅇ\n이제 앞으로는 업데이트 없이 거의 이걸로 쭉 쓸듯\n사용방법:\nhttps://docs.google.com/spreadsheets/d/1bHBjwDHrYAHdpVS6u-1Lsywp4F4aL87wh8mhYNGNBlw/edit?usp=sharing\n을 본인 구글 드라이브에 복사 후 복사본 사용\n전에는 구글 캘린더랑 스프레드시트랑 연동해서 스케줄 관리도 했었는데\n또 뭘 할 수 있으려나\n"}),a.add({id:13,href:'/docs/book/200829/',title:"김지은입니다",section:"독후감 Book Review",content:"잠깨고싶을때 읽으면 좋은 책\n시발아저씨는 쪽팔린거라도 알지,, 상고까지 꾸역꾸역했네.\n나도 한남이니 여기까지하고 걍 닥쳐야,, 성폭행 피해자의 삶은 이렇게 망가지는구나. 이런사건 있으면 남자편 안드는걸로 공식만들고 외워야겠다.\n다음은 역겨운 부분 위주로 인용\n 그 밤 오피스텔에 온 나를 보며 안희정이 말했다. “요즘 내가 미투를 보며 네게 상처가 되는 것을 알았다. 그때 괜찮았느냐.” 그리고 내 반응을 살폈다. 무슨 말을 해야 할지 몰라서 대답을 못 하고 있었다. “미안했다. 그때 너 괜찮았느냐.” 내게 다시 물었다. “지금은 괜찮으냐?” 아무 대답도 할 수 없었다. 고개만 푹 숙이고 있었다. 그러고는 “너는 미투에 대해 어떻게 생각하느냐”며 미투에 대한 내 의견을 물었다. 이어 “내가 쉴 수도 있는데 너도 따라서 쉬어라”라며 내 미래를 운운했다. 안희정은 내가 자신과 ‘공동운명체’라는 것을 대답 전에 다시금 인식시켰다. 강한 압박이 느껴졌다.“제가 감히 어떻게 미투를 하겠어요”라고 말했다. 그렇게 그는 내게서 미투를 하지 않겠다는 대답을 받아냈다. 결국 내 대답으로 나를 무기력하게 만든 후 안희정은 내게 다시 성폭행을 가했다. 도망칠 수 없었다. 덫을 놓고 먹이를 기다리는 사냥꾼1에게서 나는 옴짝달싹 못 하고 그대로 비틀려졌다.범죄가 끝나고, 새벽 2시가 넘은 늦은 시간 안희정은 내게 말했다. “아침에 아내가 오기로 했으니 청소를 하고 나가라.” 청소 도구가 어디 있는지 알려주었다. 먼지 제거 테이프로 침구를 정리했다. 내가 청소하고 있을 때 골프 채널을 보던 안희정이 빨리 안 나가고 뭐 하냐며 재촉했다. “멍 때리지 마라, 절대 기다리게 해서는 안 된다, 격식 있는 자리인지 미리 확인해라, 지위에 맞지 않는 자리를 싫어하신다, 행사 시 앉는 자리에 착석하는 끝까지 봐야 한다, 보안이 필요한 식사는 수행비서 개인 카드로 결제해라, 사우나, 미용, 마사지 등 지사의 개인 일과 비용도 수행비서 개인 사비로 써라, 지사 가족들의 비용도 수행비서가 부담한다, 현금을 넉넉히 가지고 다녀라, 한도 500만 원짜리 카드를 만들어라, 지사의 식성을 파악해라, 아주 세세한 음식 기호를 외워서 맞춰드려야 한다, 얼굴이나 이름을 못 외우니 수행비서가 보조 기억 장치로 있다가 옆에서 알려드려야 한다, 각종 신고서도 수행비서가 써서 챙겨드려라, 경제 용어도 외워라, 못 알아들으면 안 된다, KTX를 탈 때 수행비서 앞에 있는 받침대는 지사의 커피와 가방을 놓을 수 있게 펼쳐놓아라, 아메리카노에 각설탕은 1개, 시럽일 때는 2번 펌핑해야 한다, 빵을 사 오라 하면 크루아상이나 따뜻한 플레인 베이글을 사라, 크림치즈와 나이프를 같이 준비해드려라, 가끔 단 것을 찾으시면 그럴 땐 옛날 꽈배기를 사라, 우유는 예전에는 커피우유만 드셨으나 요즘에는 흰 우유를 주로 드신다, 꼭 빨대 챙겨라, 자주 부르고 자주 심부름을 시키신다, 병장을 웃기는 이등병의 마음을 가져라, 공식 일정 이후 시간, 기업, 친구, 여자 이야기는 주변에 함구하라, 특히 여자 관련해서는 인수인계서 메모에서도 삭제해라, 단어 언급조차 하지 말고 어디에 쓰지도 마라, 보고 듣고 알아도 비밀을 유지하고 반드시 함구하라, 중요하니 재차 강조한다 (…) 마지막으로 지금까지의 인수인계에서 가장 중요한 것은 ‘지사님 기분’이다, 여기에 별표 두 개를 그려라, 인수인계 사항들은 모두 지사님 기분을 맞춰드리기 위한 것이다.” 안희정의 부인이 빵이 먹고 싶다고 하면 나는 다른 사람들이 식사하는 시간에 그걸 사러 다녀왔다. 유명 빵집이 멀든 그래서 내 밥을 못 먹든 상관없이 말이다. 이런 구매에 들어가는 돈은 누구에게도 받을 수 없었다. 안희정은 성폭행을 한 후 매번 즉각 사과했다. “대통령이 되는 길이 버겁다.” “내 위치가 너무 힘들고 외로워서 그랬다.” “어린 너를 가져서 미안하다.” “내 직원에게 부끄러운 짓을 해서 미안하다.” “너는 수행비서이니 나를 이해해달라.” “너는 나의 그림자다.” “나를 끝까지 지켜달라.” “비밀을 지켜주고 함구해달라.” 성적 수발까지도 수행비서가 감내해야 할 일인 양 세뇌시켰다. “일이 되어가는 과정 중 하나일 뿐, 결과가 중요하지 지금 네가 당한 일은 아무런 문제도 아니다”라는 내용을 반복해서 들었다. “너는 나의 훌륭한 참모다.” “나는 너를 신뢰하고 의지한다.” “내가 시키는 대로만 하라.” “다시는 그러지 않겠다.” “다 잊고 씩씩하게 일하자.” “러시아와 스위스의 아름다운 풍경만 기억해라.” 그렇게 내가 성폭력을 문제 삼지 않도록 되뇌게 했다.거듭되는 사과와 이어지는 강도 높은 업무들은 다른 생각을 할 수 없도록 만들었다. 안희정은 내가 정신적으로 흐트러지는 모습이 잠깐이라도 보이면 괜찮아 보일 때까지 내내 미안하다고 했다. 그렇게 부하 직원을 성폭행하고도 맹목적인 복종을 하게 만들고, 입을 막아버렸다.성폭력과 사과는 아무렇지 않게 반복되는 연속적 일상이었다. 집무실이나 관용차 안에서는 가슴이나 허벅지 등 신체를 수시로 툭툭 치고 만졌다. 그가 차 안에서 잠을 자거나 휴식을 취할 때면 나를 옆에 앉히고 손 마사지를 시켰다. 늦은 시간 외진 장소, 화장실 앞이나 기차, 식당 안에서도 사람들의 눈을 피해 성추행은 계속됐다. “저 앞 여자 다리 예쁘지 않냐?” “모든 여자들이 나를 좋아한다.” “내가 그렇게 잘생겼니?” 그의 성추행과 성희롱은 점점 더 과감해지고 심해졌다. 안희정도 마찬가지였다. 출근을 하면 내 얼굴부터 발끝까지 몸을 위아래로 훑어보았다. 내 속눈썹을 살피기도 했고, 화장과 옷에 대해 평했다. 그들은 여전히 조직의 권력과 위계질서 속에서 살아가는 직장인이었고, 재판에 나와 증언하는 것을 부담스러워했다.이후 증인으로 나와준 사람들은 대체로 둘로 나뉜다. 자신이 겪을 어려움을 감내하면서까지 경험한 사실을 말해준 사람들과 없던 일을 증언하는 사람들이었다.전자의 증인들 중 일부는 모해위증이라는 죄목으로 안희정으로부터 고소를 당하기도 했다. 고발 이후 혐의 없음으로 처분 났다. 이후 안희정은 항고했지만 항고는 기각되었다. 어떤 증인은 증언을 하기로 한 이후 나에 대한 지라시 정보를 지속적으로 받기도 했다. 김지은이 이상한 사람이니 더 증언하지 말라는 메시지였다. 안희정은 최초 자신의 페이스북을 통해 “합의에 의한 관계가 아니었다”고 시인했다. 이후 변호사를 선임한 직후에는 “남녀 간의 애정을 기반으로 한 연인 관계였다. 연애였다”라며 입장을 번복했다. 안희정과 엘리베이터를 함께 탄 적이 있습니다. 저를 너무 빤히 쳐다봤고, ‘예쁘다’고 말하며 저의 어깨를 잡고 자신 쪽으로 끌어당겨 안았습니다. 이후에는 남성 동료들에게는 오지 않았던 개인적인 텔레그램 메시지를 받기도 했고, 공적으로 엮인 저에게 ‘아가야’라는 호칭을 사용하기도 했습니다.”“평소 저를 빤히 쳐다보거나, 손이나 손목을 잡는 일이 많았습니다. 그리고 자신의 머리 스타일을 만져달라고 하거나 자신의 옆자리에 앉으라고 말하는 경우가 종종 있어 불편했습니다. 어느 날 식사 자리에서 안희정이 저보고 옆자리에 앉으라고 했습니다. 제가 조금 긴장해서 다리를 한쪽으로 모으고 불편하게 앉았는데, 안희정이 ‘편하게 앉아’라고 말하며 제 허벅지 안쪽을 손으로 쳤습니다. ‘찰싹’ 소리가 날 정도의 터치였는데, 그 당시의 불편했던 감정이 오래 남아 있습니다.” 재판장님.피고인은 자신이 가지고 있는 권력이, 자신의 존재가 어떤 위력을 가지고 있는지 누구보다 잘 알았던 사람입니다. 그걸 통해서 갖고 싶은 것, 자기가 원하는 것을 갖는 사람이었고, 자기가 하고자 하는 건 무조건 하는 사람입니다. 피고인은 차기 대통령으로 추앙받는 그 위세와 권력을 이용해 그동안 연약하고 유약한 사람들의 노동도 착취했고, 성도 착취했고, 영혼까지 파괴했습니다. 실제로 그의 범행을 당한 피해자들은 피고인 아래 있던 직원이자 약자였고, 피고인의 힘에 대항할 수 없는 위치에 있습니다. 피고인은 누구보다 그 위계 서열을 잘 알고 있고, 그걸 이용해온 것입니다.어쩌면 그는 정신적인 문제가 있는지도 모르겠습니다. 그가 저한테 했던 말들, “나는 어떤 여자와도 잘 수 있다” “모든 여자들은 나를 좋아한다” “나는 섹스가 좋다” “내가 그렇게 잘생겼니?”라는 말, 그건 왕자병이 아니라 치료받지 못한 비정상적인 성적 욕구를 숨기지 못한 게 아닐까라는 생각도 듭니다.  "}),a.add({id:14,href:'/docs/develope/200824/',title:"hugo 블로그 구글 서치 콘솔 등록",section:"개발 기록 Developer Note",content:"깃헙 블로그에 막 신나게 글을 썼는데 검색에 노출이 안되면 은근히 섭섭하다.\n뭐,, 그런것보다도 정보를 공유하려고 하는 짓들이니 구글검색에 나오도록 해야함.\nhttps://hahafamilia.github.io/howto/hugo-staticgen/ 이분 글을 참조 해서 했다 ㅇㅇㅇ 짧게 정리하면\n  블로그가 검색 노출이 되도록 설정\n# config.toml 파일에 아래 내용 추가\renableRobotsTXT = true\r[outputs]\rhome = [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;]\r[sitemap]\rchangefreq = \u0026quot;weekly\u0026quot;\rfilename = \u0026quot;sitemap.xml\u0026quot;\r  https://search.google.com/ 에 블로그 주소 등록\n  여기에서 add property하면 끝나는게 아니라,,, (오늘알았음 )\nsitemap을 등록해야 함. 구글 크롤링하는 봇한테 안녕 우리집에는 이런것들이 있는데 소문좀 내줘 하고 알려주는 역할,,\n위에서 설정한 사이트맵 등록  https://search.google.com/ 여기서 위에서 등록한 주소 선택 후 왼쪽 탭 Index \u0026gt; Sitemaps 에\nblogAddress/sitemap.xml\nblogAddress/index.xml (이게 rss인듯. 휴고는 기본적으로 만들어주나보다 짱짱)\n두개를 추가하면 된다\n"}),a.add({id:15,href:'/docs/develope/200823/',title:"hugo 블로그 구축할때 레포가 2개 필요한 이유",section:"개발 기록 Developer Note",content:"휴고 블로그 구축할때 깃헙 레포가 2개 필요하다.\n하나는 블로그의 모든 소스가 들어가있는 폴더고 (hugo/blog)\n다른 하나는 거기에 있는 소스들을 publish해서 블로그로 보여줄 수 있는 형태로 바뀐 html위주 파일이 저장되는 레포 ㅇㅇㅇ (hugo/blog/public)\n그 개념을 잘 몰라서 지금까지 헷갈렸음,,\n"}),a.add({id:16,href:'/docs/develope/200814/',title:"구글 app script 에서 installable trigger 활성화하기",section:"개발 기록 Developer Note",content:"구글 app script에서 기본으로 제공하는 심플 트리거는 몇가지가 있다.\n(https://developers.google.com/apps-script/guides/triggers 참조)\n파일이 열릴 때 작동하는 onOpen(e), 파일을 수정할 때마다 작동하는 onEdit(e) 등\n자세한 설명은 위의 주소에 들어가면 적혀있다. 괄호 안에 들어가 있는 e는 트리거 오브젝트라고 불르는데, 겁먹지말고 예제를 보다보면 이해가 간다.\nfunction onEdit(e) { var range = e.range; range.setValue(\u0026#39;Last modified: \u0026#39; + new Date()); } 내용을 조금 수정했는데, 이런식으로 사용한다. 사용자가 스프레드시트를 수정했을 때 트리거가 작동하고 여기서 트리거 오브젝트 e는 그 이벤트에 대한 정보를 담고있다.\n위의 예제는 뭐,,, 사용자가 어떤 셀을 수정해도 그 셀의 내용이 날짜로 바뀌겠지만 ㅋㅋㅋㅋㅋ\n여튼,, 해당 파일 내부에서만 작동하는 기능이라면 상관이 없으나, 내 경우에는 이벤트에따라서 새로운 독스 파일을 생성해줘야 한다. 이럴 때는 심플 트리거를 사용할 수 없고, installable 트리거를 사용해야 한다.\n심플트리거를 사용하지 못하는 상황은 다음 주소의 설명을 참조.\nhttps://developers.google.com/apps-script/guides/triggers/installable\n그래서 여튼, installable trigger를 활성화하는 법을 단계별로 나눠보면,\n  installable trigger를 작성한다.\n  installable trigger를 활성화한다.\n  installable trigger 작성.\n  function installable_onEdit(e) { var ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getActiveSheet(); var target = sheet.getRange(\u0026#34;A1\u0026#34;) var eventLocation = e.range.getA1Notation() if (!e) { throw new Error(\u0026#39;Please do not run the script in the script editor window. It runs automatically when you edit the spreadsheet.\u0026#39;); } target.setValue(eventLocation) } 스프레드시트내부를 수정할때마다, 마지막으로 수정한 위치를 A1 notation으로 바꿔서 A1에 넣어주는 함수다.\ninstallable trigger 활성화.  https://script.google.com/home 에서 현재 해당하는 프로젝트위에 마우스를 올리면 vertical ellipsis가 뜬다. 거기에서 triggers 클릭\n오른쪽 아래 add trigger 클릭\n함수이름 및 이벤트타입 (우리 경우에는 onEdit) 선택해서 save\n경고화면이 뜨겠지만 저 아래 Go to Untitled project (unsafe)클릭해서 진행한다.\nhaha\r#\r\r"}),a.add({id:17,href:'/docs/develope/200812/',title:"구글 스프레드 시트 + app script 이용해서 독서 리스트 관리하기",section:"개발 기록 Developer Note",content:"이것은 장기 프로젝트인 거시다.\n구글 드라이브를 저장공간으로도 많이 썼지만, 스크립트를 작성해서 캘린더 일정을 스프레드시트와 연동하는 것도 만들어보고, 학과 근로 업무할때도 사용했다.\n개인적으로 독서리스트 관리 시트를 만들어서 써오다가 코드를 너무 더럽게 짜서,, 조금 개선을 시켰다.. 물론 누구의 리뷰도 받지 않았음,, (대충 더럽다는 얘기)\n리스트 관리하고 업데이트하는일이 쉬울것같은데,, 어렵더라.\n​\n먼저 인터페이스를 짜 보았다. 일단 읽을책/읽은책 리스트와 거기에 자동으로 추가/삭제하는 기능, 장르별로 대략적인 통계를 보여주는 정도로 화면구성을 했다.\n추가적인 기능들을 몇개 넣으려 했는데, 프리징 시킨 행이나 열 개수가 늘어날수록 아무래도 화면이 너무 답답해보여서 기본 목록 관리 기능만 적용하기로 하고 화면도 수정했다.\n이게 수정 후 화면. 아무래도 책 목록이 최대한 화면에 나오는게 보기에 좋더라.\n이제 이걸 바탕으로 전체적인 플로우를 짜보고 그에 맞는 함수를 작성해야한다.\n"}),a.add({id:18,href:'/docs/book/200812/',title:"오리지널스 - 애덤 그랜트",section:"독후감 Book Review",content:"헤어스타일이 인상적인 애덤 그랜트의 오리지널스.\n상식과 반하는 부분이 있어서 재미있게 읽었다.\n요약 (책 뒤에도 개인을 위해, 조직을 위해 등등 타겟에 따라 적용할 수 있는 매뉴얼이 있으니 참조)\n  창조적 파괴\n독창성 = 창조적 파괴 (조지프 슘페터), 기존 방식의 해체\n독창적인 사람 - 주도적으로 자기가 지닌 비전 실현, 현재 상태에 대한 호기심\n성취에 높은 가치를 부여할수록 실패를 두려워하고 독창성 감소\n위험 포트폴리오 관리 - 한 분야에서 안정감 확보하고, 다른 분야에서 독창성 발휘. 어정쩡한 양다리 X.\n사업에서도 인간관계에서도, 기업가들은 일반인보다 훨씬 더 위험 회피 성향이 강하다.\n→ 독창성 발휘에 성공한 사람: 기존 체제에 의문을 제기하며, 위험 포트폴리오를 안정적으로 운용하는 사람.\n  눈먼 열정에서 벗어나기\n아이디어 선정: 독창성의 가장 큰 장애물. 아이디어 창출이 가장 어려운 일 아님.\nFalse positive, False negative 피해야 함. 양은 질과 비례.\n아이디어 선정은 창출자의 동료집단이 할 때 독창적인 아이디어를 예측할 확률이 가장 높음. 또한 남의 아이디어 평가 전, 내가 아이디어 내봐야 확률 상승. 즉 경험을 많이 해 예측 가능한 환경의 분야에서만 직관이 맞음.\n나와 다른 문화권에서 얼마나 밀도 높게 일을 했는지.\n→ 가장 중요한 것: 아이디어에 대한 열정 X 실행의지(열정의 초점) O\n  위험을 무릅쓰다.\n기존 시스템에 반하는 의견을 경력과 인간관계를 해치지 않고 피력하는 법. 사회적 위계질서의 두 가지 측면. 권력과 지위.\n지위(타인의 존중과 선망) 없이 권한 행사하려하면 저항에 직면. 단순 기존 체제에 대한 저항 X. 기존 체제의 일부로서 안으로부터의 변화 추구.\n불만족스러운 상황 해결 방법 4 가지\n본인의 재량 \u0026amp; 조직에 대한 헌신의 감정에 따라 위 네가지 중 선택하게 됨. (control \u0026amp; commitment)\n→ 최선의 방법: 자기 의견을 밝히고, 필요시 탈출준비를 하면서, 위험을 안정적으로 관리. 자기검열을 덜 하고 자기 아이디어의 가치를 반복해서 익숙하게 만들기.\n  서두르면 바보\n아이디어를 실행에 옮길 시기 포착하기. 선발주자일 필요 없음. 미루기: 폭 넓은 아이디어, 즉흥적 사고를 얻을 수 있음. But 계획은 필요하다.\n*특허 관련, 네트워크 효과가 강한 분야는 선발주자가 유리\n개념적 혁신가와 실험적 혁신가. 실험적 혁신가는 시간이 오래 걸리지만, 끊임없이 새로운 아이디어를 생산한다. 시행착오와 축적된 지식.\n→ 창작하고자 하는 것이 있다면, 미리 계획을 세우기보다는 여러 잠정적 아이디어/해결책 실험. 집요하게 호기심을 발동시키고 끊임없는 시도로 강화 가능.\n  최적의 균형점과 트로이의 목마\n수평적 적대감 - 근본적 목적을 공유하지만 상대적으로 과격한 집단과 덜 과격한 집단이 있을 때 생기는 마찰.\n독창적인 사람들이 자신의 목표를 달성하려면 온건한 과격파가 되어야 함. (과격한 주장을 온건하게 전달)\n새 아이디어를 주장하는 이유에서 아이디어를 실현하는 방법 으로 초점을 전환.\n친적(관계의 부정성, 긍정성 다 높음)과는 연을 끊고 적(높은 부정성)을 내편으로 만들려 노력.\n참신함으로 시작해 익숙함을 더하기.\n  이유 있는 반항\n결과의 논리: 가장 최상의 결과를 낳는 행동\n적절성의 논리: 자신이 어떤 사람인지, 어떤 사람이 되고 싶은지를 바탕으로 행동.적절성의 논리를 따라서 행동하기.\nReasoning 기반의 훈육방법. 창의성은 비판이 많은 환경에서 자람.\n  집단 사고를 재고하라\n강력한 문화 조성을 위해 다양성을 핵심 가치에 포함.\n악마의 변호인은 지정하지 말고 찾아내야 함.\n자기 주장은 자신이 옳다는 태도로, 남의 의견 경청시에는 자신이 틀리다는 태도로.\n독창성 도입에서 멈추지 말고, 독창성을 발휘할 수 있는 문화 조성.\n  평지풍파 일으키고 평정심을 유지하기\n낙관주의: 확신이 흔들릴 때\n비관주의: 구체적 행동을 결심한 상태 (목표 달성 의지가 확고할 때)\n두 전략을 섞어서 내적 동력을 만들어야 함.\n흥분하는게 침착해지려 애쓰는 것 보다 두려움을 잘 다스림. 분노는 냉소주의를 불식한다.\n안전지대에서 몰아내기: 현 상태에 대한 분노, 불만 느낄 때.\n  "}),a.add({id:19,href:'/docs/develope/200726/',title:"LG그램에 리눅스 20.04 설치하기",section:"개발 기록 Developer Note",content:"2021.1.2 업뎃\n다 필요없고 WSL2 (Windows Subsystem for Linux 2) 설치 후 그 환경에서 ROS 깔고 이용하는게 최고!!\n오 생각보다 간단하게 설치완료. 오류도 없이 설치해버렸으요.\n내 컴터는 lg 그램 15Z990-HA7BK에 윈도우10 설치되어있었고,\nssd는 256, 512 두개 사용중. C드라이브 (256)에 윈도우 설치. 나는 D드라이브(512)에 우분투 설치 완료.\n설치 USB 준비\n USB 포맷 (FAT32) 우분투 설치파일 (.iso) 다운로드 (오늘 날짜 기준 ubuntu-20.04-desktop-amd64.iso) 다운받은 iso파일을 etcher나 뭐 이런거 사용하지 않고 그냥 우클릭해서 usb에 압축해제  컴터 준비\n D 드라이브 포맷  설치 과정\n 재부팅 후 F2 연타 bios로 들어가서 secure boot \u0026ndash;\u0026gt; false로 설정 부팅 priority usb로 설정 usb 꼽고 재부팅하면,, 설치진행할 수 있음 파티션 나누는 부분에서 잠시 흠칫했는데, 이 블로그 보고 https://lsjsj92.tistory.com/375?category=759963 바로 해결했다.  SSD 두개일 경우 하나는 /dev/sda, 다른 하나는 /dev/sdb 이렇게 인식이 되는데 나의 경우에는 첫번째 ssd에 윈도우 설치되어있는 상태. 두번째 ssd에 우분투 설치할거니 /dev/sdb의 파티션을 나눠주면 된다. 부트로더 설치할 장치도 /dev/sdb를 선택하면 됨. /dev/sdb를 선택하고 swab(/swap) 영역이랑 home(/home), root (/)이렇게 각각 파티션 설정해주고 설치 진행하면 된다   끝. 쏘 이지,,  "}),a.add({id:20,href:'/docs/develope/200723_b/',title:"인코딩, 디코딩 정리. 인스타그램 oembed 데이터 디코딩하기",section:"개발 기록 Developer Note",content:"이것도 맨날 헷갈리는 개념\n출처: https://medium.com/@chrisjune_13837/%EC%9D%B8%EC%BD%94%EB%94%A9%EA%B3%BC-%EB%94%94%EC%BD%94%EB%94%A9-87006cf8dee2\n인코딩: 문자열을 바이트로 변환\r#\r\r  바이트 코드는 utf-8, euc-kr, ascii 등의 형식을 가짐\n  파이썬은 문자열을 유니코드로 처리 ㅇㅇ\n  즉 파이썬에서 인코딩이란, 유니코드 \u0026ndash;\u0026gt; utf-8, euc-kr, ascii\r#\r\r디코딩은 그 반대: 바이트를 문자열로 변환\r#\r\rutf-8, euc-kr, ascii \u0026ndash;\u0026gt; 유니코드\r#\r\r인스타그램 oembed가 리턴해주는건 json데이터인데, 이걸 모르고\n받아온 바이트데이터를 utf-8로 인코딩 euc로 인코딩해보고 인코딩한거에서 \\\\u0000 없애보고 난리부르스를,,,\njson은 그냥 json encoding을 바로 해주면 되더라. 걍 json 모듈에 맡기면 됨\nhtml = http.request('GET','https://api.instagram.com/oembed/?url='+targetUrl)\rtext=html.data\rjson11 = json.loads(text)\r"}),a.add({id:21,href:'/docs/develope/200723/',title:"hugo 명령어 정리, git 배쉬에서 .md파일 바로 실행하기",section:"개발 기록 Developer Note",content:"맨날 까먹어서 ㅇㅇㅇ\n자주쓰는거만 정리\n$ hugo server -D\r$ hugo new docs/develope/200723.md\r$ ./deploy.sh\rzzzz\n그리고 docs아래 사용하는 폴더는\nbook / develope / diary / paper\n이렇게 있음\ngit에서 방금 생성한 마크다운 파일을 바로 실행하려면 ㅇㅇㅇ\nhttps://support.typora.io/Use-Typora-From-Shell-or-cmd/\n$ start ./content/docs/develope/200723.md\r크,,,\n사실 사진넣거나 이런거 아니면 거의 이정도만 쓴다,,\n그래도 start 명령어 오늘 처음 알았음\n뿌-듯\n"}),a.add({id:22,href:'/docs/develope/200618/',title:"추천 시스템 만들기 building a recommendation system 0",section:"개발 기록 Developer Note",content:"sns 타임라인 피드 추천 시스템을 구현해보려고 한다.\n신문기사등 다른 url을 퍼온 포스팅을 대상으로 한다.\nA라는 기사가 있고 B라는 블로그 글이 있고 C라는 외부홈페이지 글이 있을 때,\n어떤 알고리즘으로 이 기사들을 유저들의 타임라인에 노출시킬것인가?\n그러기위해서 먼저 적절한 데이터셋을 찾아보자\n다행히 내 쓰임새와 딱 맞는 데이터를 찾았다.\n​\n데이터 가공이 먼저 필요하다.\n​\n원본 데이터는 총 2개의 파일로 구성됨.\nshared_articles : 공유된 기사에 대한 정보. url, 업로드한 사람에 대한 정보, 해당 게시물에 해당된 id, 언어 등\nusers_interactions : 어떤 유저가 어떤 게시물에 좋아요를 누르고 등등을 했는지\nshared_articles에 있는 영어 게시글만 사용하려 했고,\n그러려면 비영어 게시글에 대한 user_interactions 또한 필터링해야한다.\n먼저 csv 파일을 두개 읽어오기. 구글 검색해보면 pandas 써서 합치고 뭐 그러던데, 나는 그냥 따로 불러와서 다른 변수로 저장했다.\n사진은 shared_articles.csv 파일을 엑셀에서 열어본 화면이다.\n가장 첫번째 row를 header라고 칭하는 것 같다. 아무튼 나는 header 중 eventType이 content shared \u0026amp; lang의 값이 en인 아이템을 변수로 저장하려 한다. 이때 아이템의 모든 정보를 저장하는게 아니라, timestamp, contentId, authorPersonId, authorSessionId, url 의 값 정도만 담을 것임.\narticles = [] #저장할 리스트 생성 with open(\u0026#39;./shared_articles.csv\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as csvfile: # 파일 열기 rdr = csv.DictReader(csvfile) for i in rdr: # csv 파일을 한 줄 씩 읽을거임 if i.pop(\u0026#39;lang\u0026#39;)==\u0026#39;en\u0026#39; and i.pop(\u0026#39;eventType\u0026#39;)==\u0026#39;CONTENT SHARED\u0026#39;: #영어, content shared 일때  j=OrderedDict({\u0026#39;timestamp\u0026#39;: i[\u0026#39;timestamp\u0026#39;],\u0026#39;contentId\u0026#39;: i[\u0026#39;contentId\u0026#39;],\u0026#39;authorPersonId\u0026#39;: i[\u0026#39;authorPersonId\u0026#39;], \u0026#39;url\u0026#39;: i[\u0026#39;url\u0026#39;]}) # 이런 값들로만 만들어진 dictionary 생성 articles.append(j) # 방금 만든 dictionary를 리스트에 저장 "}),a.add({id:23,href:'/docs/paper/0608/',title:"[Psychology] Happiness is a stochastic phenomenon",section:"아무논문 Paper Review",content:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.395.1181\u0026amp;rep=rep1\u0026amp;type=pdf\n행복은 확률적인 현상이다.\n​\n일란성 쌍둥이와 이란성 쌍둥이의 주관적인 행복도를 (이쪽에서는 SWB라고 표현하는 듯. abbreviation of subjective well-being) 시간간격을 두고 설문한 결과\nheritability of the stable component of subjective well-being approaches 80%.\n​\nBTW one of people who uploaded this paper tried to cross out a sentence in conclusion like\n It may be that trying to be happier is as futile as trying to be taller and therefore is counterproductive.\n and wrote \u0026ldquo;Not true\u0026rdquo;. Think I should read the authors' work more.\n​\n그리고 저자들은\nWe argue, however, that the impetus is greater from mood to behavior than in the reverse direction.\n​\n이 논문의 저자들은 경제적 상황, 결혼상황, 직업의 만족도를 포함한 다른 요소보다 유전적인 요인이 행복에 더 큰 영향을 끼친다는 결론을 내렸다.\n​\n내 행복이 유전적으로 물려받은거라고? 뭔가 이겨내고 싶다. ㅋㅋㅋㅋ 물론 행복을 좇는 삶 같은건 추구하지 않지만,,\n다른 논문들은 어떤 주장을 할까나\n"}),a.add({id:24,href:'/docs/develope/200604/',title:"google cloud function을 이용한 크롤러 2",section:"개발 기록 Developer Note",content:"이전글\n 파이썬 + request + beautifulsoup를 구글 클라우드 펑션에 구현하기\nhttps://jdh-earthling.github.io/docs/developernote/200505/\ngoogle cloud function을 이용한 크롤러\nhttps://jdh-earthling.github.io/docs/developernote/200525/\n google cloud function이 어떻게 작동하는지 대충 파악했고\nrequests도 사용할 줄 아니\n외부로부터 http요청을 받으면 http요청에 포함된 타겟url값을 가지고 크롤링을 하는 서버를 만들 수 있다 ㅇㅇ\n그러기 위해서는\n 타겟 url을 포함하는 http 요청을 서버가 읽을 수 있는 형태로 서버에 날린다. http요청을 해석하고 타겟 url 크롤링 수행 크롤링한 데이터를 return한다  ​\n짧게 기록하자면\n  request가 읽을 수 있는 형태로 http 요청 날리기\nget을 사용할 수도 있고, post를 사용할 수도 있는데 그 둘의 차이는 다음 링크에 잘 설명되어있다.\nhttps://blog.outsider.ne.kr/312\n   ​	GET은 가져오는 것이고 POST는 수행하는 것입니다.\n ​	라고하는데, 그렇다면 우리의 경우는 어떤걸 써야하나\n​\n​	크롤링서버의 주소가 server.com/function이라고 했을 떄\n​	GET을 사용할 경우 클라이언트가 요청하는 http 프로토콜은 다음과 같다.\n​	server.com/function?url=https://blog.ahahahah.com/blabla/21012030320\n​	클라이언트가 받게될 정보는 실제로 위의 주소를 가진 기존에 생성된 페이지에서 오는게 아니라, 위의 http 요청에서 ?url= 뒤에있는 타겟url에서 서버가 정보를 크롤링해오는 것이기 때문에\n​	POST를 사용하는 것이 맞다\n​\n post로 날라온 http request에서 target url 값 읽고 크롤링\n쉬움 ㅇㅇ (해놓고보면 ㅇㅇㅇ) beautifulsoap 등 파이썬 크롤링 모듈 많으니 쓰면 됨.\n문제는 크롤링 알고리즘이랑 방법론\n  크롤링한 데이터 json으로 리턴\n파이썬 dict 사용해서 크롤링한 데이터 정리하고 그대로 리턴하면 됨다\u0026hellip;\n  "}),a.add({id:25,href:'/docs/develope/200525/',title:"google cloud function을 이용한 크롤러",section:"개발 기록 Developer Note",content:"이전 글\nhttps://jdh-earthling.github.io/docs/developernote/200505/\n 함수서버 url을 server.com/function 이라고 했을때\n클라이언트가 server.com/function?url=https://blog.naver.com/blabla/21012030320\n에 접속을 하면 (요청을 하면)\n서버는 위 url 주소에 해당하는 (https://blog.naver.com/blabla/21012030320) 페이지의 이런저런 소스들을 가져온다.\n 이어서,,\ndef hello_world(request): \u0026#34;\u0026#34;\u0026#34;Responds to any HTTP request. Args: request (flask.Request): HTTP request object. Returns: The response text or any set of values that can be turned into a Response object using `make_response \u0026lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response\u0026gt;`. \u0026#34;\u0026#34;\u0026#34; request_json = request.get_json() if request.args and \u0026#39;message\u0026#39; in request.args: return request.args.get(\u0026#39;message\u0026#39;) elif request_json and \u0026#39;message\u0026#39; in request_json: return request_json[\u0026#39;message\u0026#39;] else: return f\u0026#39;Hello World!\u0026#39; 중간 주석에 쓰여진대로 hello_world함수의 argument로 들어가는 request는 어딘가에서 보낸 http request object를 의미한다.\nhttp request는 대충 \u0026ldquo;나 누군데 이 url에 대한 html좀 보내봐\u0026rdquo; 정도의 메세지라고 이해하면 될 듯 싶다.\nrequest obj는 나의 자격과 + 접속하고 싶은 주소의 정보를 담고 있음.\n더 기본적으로는 접속하고 싶은 url 정보가 담겨있다.\n암튼 파이썬의 flask라는 모듈에서 html 요청을 하기 위해 request라는 클래스를 사용함.\n아무튼 예제 함수에 한줄씩 주석을 달아보았다.\ndef hello_world(request): \u0026#34;\u0026#34;\u0026#34;Responds to any HTTP request. Args: request (flask.Request): HTTP request object. Returns: The response text or any set of values that can be turned into a Response object using `make_response \u0026lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response\u0026gt;`. \u0026#34;\u0026#34;\u0026#34; request_json = request.get_json() #json 형태로 request 가 전달될 수 있으니 json정보 추출 if request.args and \u0026#39;message\u0026#39; in request.args: return request.args.get(\u0026#39;message\u0026#39;) #request의 argument 중 message 라는 애가 있으면 해당하는 key 값을 리턴 elif request_json and \u0026#39;message\u0026#39; in request_json: return request_json[\u0026#39;message\u0026#39;] #json 형식으로 전달된 request가 message라는 name에 해당하는 key값 리턴 else: return f\u0026#39;Hello World!\u0026#39; #아니면 그냥 에라 모르겠다 소리질러ㅓㅓ 반갑다 세상아 그렇다면 구글 클라우드 펑션 샘플 서버의 url을 server.com/function이라고 했을 때\nserver.com/function?message=lol\n을 웹브라우저에 복붙하고 엔터를 누르면 어떤 화면을 볼 수 있을까?\n는 직접 해보면 안다. lol\n"}),a.add({id:26,href:'/docs/develope/200505/',title:"파이썬 + requests + beautifulsoup 를 구글 클라우드 펑션에 구현하기",section:"개발 기록 Developer Note",content:"Google cloud function을 사용해서, 크롤링 서버를 하나 만들었음.\n함수서버 url을 server.com/function 이라고 했을때\n클라이언트가 server.com/function?url=https://blog.ahahahah.com/blabla/21012030320\n에 접속을 하면 (요청을 하면)\n서버는 위 url 주소에 해당하는 (https://blog.ahahahah.com/blabla/21012030320) 페이지의 이런저런 소스들을 가져온다.\n매우 간단한 기능을 구현했음에도, 리비전 횟수가 70번에 이를만큼 삽질을 많이 해서 기록으로 남김\u0026hellip;\n누군가에게는 유용했으면 하는 마음이랄까나\n한 일 / 과정\r#\r\r 구글 클라우드 펑션 서버를 연다. 파이썬으로 예제를 돌려봄. url에 따라서 다른 출력을 내는 것을 확인. 서버 동작 환경에 beautifulsoup 설치 bs4 사용하여 html 파싱하기. 원하는 정보 출력하기  파이썬 콘솔 사용해서 개발했음.\n하나씩 정리해보면\n1.구글 클라우드 펑션 서버 오픈\r#\r\r구글의 여타 다른 서비스들처럼, documentation이 엄청 잘되어있음.\nhttps://cloud.google.com/functions/docs/quickstart-python?hl=ko\n설명보고 잘 만들면 됨.\n메인 콘솔 페이지에서 그림에 표시한 부분을 누르면 함수 관리, 수정 등이 가능\n2. 위에서 만든 서버에 접속을 해보면 hello world가 나옴.\r#\r\r트리거 주소를 브라우저에 복붙하면 (또는 curl 사용하든) 반가운 hello world가 나온다\n여기서 샘플코드를 한번 자세히 살펴보자.\ndef hello_world(request): \u0026#34;\u0026#34;\u0026#34;Responds to any HTTP request. Args: request (flask.Request): HTTP request object. Returns: The response text or any set of values that can be turned into a Response object using `make_response \u0026lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response\u0026gt;`. \u0026#34;\u0026#34;\u0026#34; request_json = request.get_json() if request.args and \u0026#39;message\u0026#39; in request.args: return request.args.get(\u0026#39;message\u0026#39;) elif request_json and \u0026#39;message\u0026#39; in request_json: return request_json[\u0026#39;message\u0026#39;] else: return f\u0026#39;Hello World!\u0026#39; request라는게\n위 함수는 Flask라는 거 위에서 돌아가는거 같음.\n이어서,,,\n"}),a.add({id:27,href:'/docs/develope/gcf1/',title:"구글 클라우드 펑션",section:"개발 기록 Developer Note",content:"구글 클라우드 펑션을 사용중.\n친구랑 뭘 좀 만들어보려고하는데, 내 진도가 느리다.\n어떤 펑션을 돌리는 서버를 클라우드에 올리는건데 좋네. 구글은 몬하는게 뭐니.\nhttp 기본이 전혀 없어서 우격다짐으로 해보는중인데, ㅇㅇㅇ\n\u0026ldquo;서버url\u0026rdquo;+\u0026quot;?\u0026quot;+\u0026ldquo;value=\u0026quot;+\u0026ldquo;hahaha\u0026rdquo;\n이런식으로 url이 들어가면 서버는 이 클라이언트가 요청한 value 값에따라서 이런저런걸 처리하는거구나.\nf-string을 사용함.\ngcf에서 beautifulsoup를 import하는 방법을 찾는중이다.\n그냥 requirements.txt에 적으면 deploy는 되는데 함수 실행시 에러가 난다.\n"}),a.add({id:28,href:'/docs/develope/insertimg/',title:"Insertimg",section:"개발 기록 Developer Note",content:"휴고 포스트에 이미지 넣기.\n매우 쉬웠음.\nstatic 폴더 안에 있는 이미지들은 그대로 올라감. 상대패스도 그대로.\n그래서 로고이미지의 위치가 static/logo.jpg 라면\n마크다운에 그냥 logo.jpg 넣고\n이미지가 넘 많아질것같으니 폴더에 넣어서 관리하겠어 하면 static안에 새로운 폴더를 만들어서 거기에 넣으면 상대경로를 그대로 사용 가능.\nstatic/image/1.png는 /image/1.png 라고 마크다운에 파일위치를 넣어주면 된다. 미리보기에서는 안됨 ㅍㅎㅎㅎ\n암튼 하나 했음 별거아니지만 뿌-듯\n 200814 추가\n\\image\\1.png 는 안된다!!\n헷갈리므로 조심\n"}),a.add({id:29,href:'/docs/develope/hugo-blog/',title:"휴고 블로그 구축과정",section:"개발 기록 Developer Note",content:"  블로그 프레임웍 정하기\n맨처음에는 깃헙 블로그 검색하면 한글로 가장 많이 나오는 지킬로 기본 테마만 만들고 수정할 수 없어서 몇번 만들어놓기만 하고 포기\u0026hellip;\n이후 헥소라는 애를 써봄. 쉬운듯했으나 뭔가 어려웠다. 영어로 된 자료도 별로 없었음. 그래서 또 헤엄.\n휴고라는 친구를 발견. 오오. 이게 요새 핫하다 이거지. 그래 정했어.\n적용하고 코드도 뜯어보니 이게 그나마 낫다. 단순히 그동안의 시행착오가 누적되어 그런걸지도..\n  테마 정하고\nbook 이라는 테마로 정함. 깔끔하네.\n  커스토마이즈\n게시판형식+블로그형식으로 만들고 싶었는데, 만조크스럽다.\n  구글에 여러 자료가 있지만, 개인적으로는 이 글이 제일 도움이 되었음.\nhttps://github.com/Integerous/Integerous.github.io\n*https://ialy1595.github.io/post/blog-construct-2/ 여기도 설명이 잘되어있다. theme파일 내부를 수정하지 말고 override해서 쓰라는게 예의라는데,, 제송합니다. 예의도 지식이다\u0026hellip; 주륵.\n커스토마이즈하면서 헷갈렸던 사항\r#\r\r  페이지 종류의 구분과 레이아웃 적용\n휴고 도큐멘테이션 읽어보면 section , list, post, 등등 뭐 페이지마다 구분이 있는것같은데. 아직 잘 모르겠다.\n내 블로그의 경우에는 크게\na. 메인화면 (블로그 첫화면 및 블로그 소개 페이지)\nb. 게시글 리스트 (왼쪽 글 카테고리 눌렀을때 해당 카테고리 아래 글 목록 출력)\nc. 개별 게시물\n요렇게 세 가지의 레이아웃이 필요한데 폴더트리 내부의 개별 마크다운 파일에 각각 어떤 양식이 적용되는지 몰라서 시간이 오래걸렸다.\n기본적으로 모든 게시물은 _default 폴더의 single.html 레이아웃을 적용하는 것 같고,\n그걸 휴고에서는 default 타입의 single 레이아웃을 적용했다고 표현한다.\n적용할 레이아웃 형식을 해당 마크다운 파일 앞단 front matter에 명시하면 바꿀 수 있다.\n위 그림에서 볼드체로 글 목록 List라고 써져있는 부분이 본문이고 그 전에 회색박스가 마크다운 파일의 기본정보를 담고있는 front matter임 ㅇㅇ. 마크다운 한정인지는 모르겠지만 여튼.\n그중에서 마지막 두개는 (type: post, layout: list)\n이 마크다운 파일을 layout 폴더의 post 폴더 안에있는 list.html 레이아웃을 사용해 페이지상에 나타내겠다~\n는 뜻임 ㅇㅇ\n  아무튼 그래서 나는\na. 메인화면 : posts/single.html\nb. 게시글 리스트: posts/list.html\nc. 개별 게시물: _default/single.html\n이렇게 적용하고, 각각의 html을 내맘에 맞게 수정했다 이거임 ㅇㅇ\n  추가작업\r#\r\r 댓글 구글광고? ㅋㅋㅋㅋㅋㅋㅋㅋㅋ 오른쪽 공간 활용\u0026hellip; contact? 숙제처럼 남은 작업 태그걸고 옆에 표시하면 얼마나 좋아 태그 등 기능 활용 본문 다음글 이전글 ㅇㅇ theme overriding 이미지 삽입도 지금 막무가내야\u0026hellip; 폰트 변경 (noto sans)  "}),a.add({id:30,href:'/docs/develope/yuppppp/',title:"Fiiinally",section:"개발 기록 Developer Note",content:"드디어 블로그 뼈대 완성쓰 했다\nFinally I finished building my blog structure using hugo :P\nTook so much energy and time.\nNow the document begins\n"}),a.add({id:31,href:'/docs/develope/blogframework/',title:"블로그 프레임웤 정함",section:"개발 기록 Developer Note",content:"마침내 깃헙블로그 프레임웤을 정했음.\n지킬 \u0026ndash;\u0026gt; 헥소 \u0026ndash;\u0026gt; 휴고\n앞에 두 개는 하나도 이해할 수 없어서 너무나 막막했기에 더 쉬운 사용성을 가진 플랫폼을 찾아다녔다\n휴고는 그나마 좀 알겠다는거? 따라서 커스텀하기도 빠를것이다 하는 생각임\n그래서 무슨 내용을 어떤식으로 올릴것인가.\n나도모르오.\n"}),a.add({id:32,href:'/docs/develope/xpath-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EC%B0%BE%EA%B8%B0/',title:"xpath 사용해서 엘리먼트 찾기",section:"개발 기록 Developer Note",content:" xpath에 엘리먼트가 로딩(?) 될 때 까지 5초 기다림. 엘리먼트가 로드되면 esc 누름. 외국서버에 있는 홈페이진데 굳이 모든 요소가 로딩될때까지 기다릴 필요는 없으니 ㅇㅇ  WebDriverWait(driver, 5).until(\rEC.presence_of_element_located((By.XPATH , \u0026quot;\u0026quot;\u0026quot; // *[@id=\u0026quot;mainContent\u0026quot;]/div/div[1]/main/div[1]/div[1]/p \u0026quot;\u0026quot;\u0026quot;))\r)\rActionChains(driver).send_keys(Keys.ESCAPE).perform()\r지정한 위치(xpath)에 있는 요소를 찾음. 그리고 걔를 num_of_results라는 변수로 저장.  num_of_results= driver.find_element_by_xpath(\u0026quot;\u0026quot;\u0026quot; //*[@id=\u0026quot;mainContent\u0026quot;]/div/div[1]/main/div[1]/div[1]/p \u0026quot;\u0026quot;\u0026quot;)\r2번과 같이 xpath로 엘리먼트를 찾아서 info라고 정의.  info = driver.find_element_by_xpath(\u0026quot;\u0026quot;\u0026quot;//*[@id=\u0026quot;product-description-content-8\u0026quot;]/div/div\u0026quot;\u0026quot;\u0026quot;)\rinfo라는 엘리먼트 내부(.)에서 p태그를 가진 요소\u0026rsquo;들\u0026rsquo;을 모두 찾음(//p). elements이기 때문에 serving_info는 리스트임. ㅇㅇ.  serving_info=info.find_elements_by_xpath(\u0026quot;.//p\u0026quot;)\rinfo라는 엘리먼트 내부의 테이블을 모두 찾는데(.//table) 그 테이블이 td의 child일 경우에는 제외([not(ancestor::td)])  nutritional_info=info.find_elements_by_xpath(\u0026quot;\u0026quot;\u0026quot;.//table[not(ancestor::td)]\u0026quot;\u0026quot;\u0026quot;)\rtable이라는 엘리먼트 내부의 td태그를 가진 요소들을 모두 찾는데, 그 td가 table을 child로 가지는 경우에는 제외 ([not(child::table)])  nut_info_text = table.find_elements_by_xpath(\u0026quot;\u0026quot;\u0026quot;.//td[not(child::table)]\u0026quot;\u0026quot;\u0026quot;)\r"}),a.add({id:33,href:'/docs/develope/%EB%A7%88%EC%9D%B4%ED%94%84%EB%A1%9C%ED%8B%B4-%EC%9B%B9%ED%81%AC%EB%A1%A4%EB%9F%AC/',title:"마이프로틴 웹크롤러",section:"개발 기록 Developer Note",content:"파이썬+셀레늄을 이용해 마이프로틴 웹사이트 크롤러를 만드는 중\n이전에도 크롤링 프로그램을 만들어본 적이 있으나 언제나 배보다 배꼽이 더 큰 느낌 LMAO\u0026hellip;\n여튼, 이전에는 마우스 좌표도 넣어주고 하는 등 매우 허섭하게 만들었던 것 같은데\n이번에는 xpath 이용해서 (제대로 된 방법인지는 모르겠으나)\n그래도 나름 요소들을 최대한 골라내어 크롤링을 하려했다.\n가장 중요한 교훈은\n첫 정보를 긁어올 때 제대로 긁어와야 그 이후 과정이 편하다는 것.\n이 테이블 값 긁어오느라 xpath 넣어줄때도 조건문도 넣고 패런츠 차일드 등등 새로운 걸 많이 알게 되었다. 어디엔가는 또 써먹을 일이 있겠지.\n찾아보면 방법이 있는게 더 신기했음.\nxpath 주소 찾아가는 법에 대해서 언제 포스팅으로 남겨야겠다.\n"}),a.add({id:34,href:'/docs/develope/aint-easy/',title:"aint easy",section:"개발 기록 Developer Note",content:"building an web crawler to gather nutritional information of every products on myprotein\nexpected to finish by today, but didn\u0026rsquo;t go as scheduled, like everything else in our lives. LOL\nbut at least I\u0026rsquo;m enjoying it\n"}),a.add({id:35,href:'/docs/develope/building-a-web-crawler/',title:"building a web crawler",section:"개발 기록 Developer Note",content:"파이썬으로 마이프로틴 홈페이지를 긁어서, 제품 DB를 만들고\n내가 현재 먹고있는 영양제들을 체크하면\n전체 영양소를 보여주는 걸 만들려고 한다.\n먼저 크롬 크롤러부터 구축하는중.\n이전에 학교 근로할 때 노가다가 귀찮아서 크롤러 만들었던게 도움이 된다.\n적어도 크롤링 도구를 만들 수 있다는걸 아는게 어딘지..\nBuilding a python web crawler (in chrome browser) since yesterday, to get nutrition information of every products of myprotein.\nWhen someone pick currently-taking-product among product list,\nit will display daily intake vitamins, proteins, or whatever in total. not for a single product\n"}),a.add({id:36,href:'/docs/develope/finally/',title:"can a github blog substitute a paper note?",section:"개발 기록 Developer Note",content:"from what jekyll? to hexo finally.\nmuch easier to use for newbs just like me lol\nso, what do I post from now? idk\n"}),a.add({id:37,href:'/docs/develope/haha/',title:"haha",section:"개발 기록 Developer Note",content:"test\n"}),a.add({id:38,href:'/posts/goisforlovers/',title:"(Hu)go Template Primer",section:"Blog",content:"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates\r#\r\rGo templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax\r#\r\rGolang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}\r Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}\r Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}\r Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}\r Variables\r#\r\rEach Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;\r Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}}\r{{ $address }}\r Functions\r#\r\rGo template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}\r Includes\r#\r\rWhen including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}\r Logic\r#\r\rGo templates provide the most basic iteration and conditional logic.\nIteration\r#\r\rJust like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }}\r{{ . }}\r{{ end }}\r Example 2: Declaring value variable name\n{{range $element := array}}\r{{ $element }}\r{{ end }}\r Example 2: Declaring key and value variable name\n{{range $index, $element := array}}\r{{ $index }}\r{{ $element }}\r{{ end }}\r Conditionals\r#\r\rIf, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{else}}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\r Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}\r Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }}\r{{ index .Params \u0026quot;alt\u0026quot; }}\r{{ else if isset .Params \u0026quot;caption\u0026quot; }}\r{{ index .Params \u0026quot;caption\u0026quot; }}\r{{ end }}\r Pipes\r#\r\rOne of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}\r is the same as\n{{ eq 1 1 | if }} Same {{ end }}\r It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}\r Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}\rStuff Here\r{{ end }}\r Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }}\rStuff Here\r{{ end }}\r Context (aka. the dot)\r#\r\rThe most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }}\r{{ range .Params.tags }}\r\u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt;\r{{ end }}\r Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters\r#\r\rHugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters\r#\r\rIn each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n---\rtitle: \u0026quot;Permalinks\u0026quot;\rdate: \u0026quot;2013-11-18\u0026quot;\raliases:\r- \u0026quot;/doc/permalinks/\u0026quot;\rgroups: [\u0026quot;extras\u0026quot;]\rgroups_weight: 30\rnotoc: true\r---\rHere is the corresponding code inside of the template:\n {{ if not .Params.notoc }}\r\u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt;\r{{ .TableOfContents }}\r\u0026lt;/div\u0026gt;\r{{ end }}\r Using Site (config) Parameters\r#\r\rIn your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt;\r\u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt;\r\u0026lt;/footer\u0026gt;{{end}}\rAn alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt;\r\u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt;\r\u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot;\ralt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r\u0026lt;/span\u0026gt;{{end}}\rFinally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt;\r\u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}\r\u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\r{{end}}\u0026lt;/ul\u0026gt;\r\u0026lt;/nav\u0026gt;\r"}),a.add({id:39,href:'/posts/hugoisforlovers/',title:"Getting Started with Hugo",section:"Blog",content:"Step 1. Install Hugo\r#\r\rGo to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs\r#\r\rHugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo\rcd hugo\r/path/to/where/you/installed/hugo server --source=./docs\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Press ctrl+c to stop\r Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site\r#\r\rStop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 27 ms\r\u0026gt; Web Server is available at http://localhost:1313\r\u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content\r\u0026gt; Press ctrl+c to stop\r Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site\r\u0026gt; 29 pages created\r\u0026gt; 0 tags index created\r\u0026gt; in 26 ms\r Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun\r#\r\rThe best way to learn something is to play with it.\n"}),a.add({id:40,href:'/docs/example/collapsed/3rd-level/4th-level/',title:"4th Level",section:"3rd Level",content:"4th Level of Menu\r#\r\rCaesorum illa tu sentit micat vestes papyriferi\r#\r\rInde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"}),a.add({id:41,href:'/docs/example/collapsed/3rd-level/',title:"3rd Level",section:"Collapsed",content:"3rd Level of Menu\r#\r\rNefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral),\rnorthbridge_services_troubleshooting, personal(\rfirmware_rw.trash_rw_crm.device(interactive_gopher_personal,\rsoftware, -1), megabit, ergonomicsSoftware(cmyk_usb_panel,\rmips_whitelist_duplex, cpa)));\rif (5) {\rmanagementNetwork += dma - boolean;\rkilohertz_token = 2;\rhoneypot_affiliate_ergonomics = fiber;\r}\rmouseNorthbridge = byte(nybble_xmp_modem.horse_subnet(\ranalogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet),\rgateway_ospf), repository.domain_key.mouse(serverData(fileNetwork,\rtrim_duplex_file), cellTapeDirect, token_tooltip_mashup(\rripcordingMashup)));\rmodule_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) +\rcoreLog.joystick(componentUdpLink), windows_expansion_touchscreen);\rbashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling(\rciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);\r "}),a.add({id:42,href:'/docs/example/hidden/',title:"Hidden",section:"Example Site",content:"This page is hidden in menu\r#\r\rQuondam non pater est dignior ille Eurotas\r#\r\rLatent te facies\r#\r\rLorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona\r#\r\rO fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer),\rpad.property_data_programming.sectorBrowserPpga(dataMask, 37,\rrecycleRup));\rintellectualVaporwareUser += -5 * 4;\rtraceroute_key_upnp /= lag_optical(android.smb(thyristorTftp));\rsurge_host_golden = mca_compact_device(dual_dpi_opengl, 33,\rcommerce_add_ppc);\rif (lun_ipv) {\rverticalExtranet(1, thumbnail_ttl, 3);\rbar_graphics_jpeg(chipset - sector_xmp_beta);\r}\r Fronde cetera dextrae sequens pennis voce muneris\r#\r\rActa cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software;\rif (internic \u0026gt; disk) {\remoticonLockCron += 37 + bps - 4;\rwan_ansi_honeypot.cardGigaflops = artificialStorageCgi;\rsimplex -= downloadAccess;\r}\rvar volumeHardeningAndroid = pixel + tftp + onProcessorUnmount;\rsector(memory(firewire + interlaced, wired)); "}),a.add({id:43,href:'/docs/shortcodes/buttons/',title:"Buttons",section:"Shortcodes",content:"Buttons\r#\r\rButtons are styled links that can lead to local page or external link.\nExample\r#\r\r{{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}} \rGet Home\r\rContribute\r\r"}),a.add({id:44,href:'/docs/shortcodes/columns/',title:"Columns",section:"Shortcodes",content:"Columns\r#\r\rColumns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example\r#\r\rLeft Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\rMid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!\r\rRight Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\r\r"}),a.add({id:45,href:'/docs/shortcodes/details/',title:"Details",section:"Shortcodes",content:"Details\r#\r\rDetails shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample\r#\r\r{{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title\rMarkdown content Lorem markdownum insigne\u0026hellip;\r\r\r"}),a.add({id:46,href:'/docs/shortcodes/expand/',title:"Expand",section:"Shortcodes",content:"Expand\r#\r\rExpand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample\r#\r\rDefault\r#\r\r{{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} \r\rExpand\r↕\r\rMarkdown content Lorem markdownum insigne\u0026hellip;\r\r\r\rWith Custom Label\r#\r\r{{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}} \r\rCustom Label\r...\r\rMarkdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\r\r\r\r"}),a.add({id:47,href:'/docs/shortcodes/hints/',title:"Hints",section:"Shortcodes",content:"Hints\r#\r\rHint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example\r#\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\rMarkdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa\r\r"}),a.add({id:48,href:'/docs/shortcodes/katex/',title:"Katex",section:"Shortcodes",content:"KaTeX\r#\r\rKaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample\r#\r\r{{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}} \r\r\r\rDisplay Mode Example\r#\r\rHere is some inline example: \r\\(\\pi(x)\\)\r\r, rendered in the same line. And below is display example, having display: block \r\\[\rf(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\r\\]\r\rText continues here.\n"}),a.add({id:49,href:'/docs/shortcodes/mermaid/',title:"Mermaid",section:"Shortcodes",content:"Mermaid Chart\r#\r\rMermaid is library for generating svg charts and diagrams from text.\nExample\r#\r\r{{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}} \r\r\r\r"}),a.add({id:50,href:'/docs/shortcodes/section/',title:"Section",section:"Shortcodes",content:"Section\r#\r\rSection renders pages in section as definition list, using title and description.\nExample\r#\r\r{{\u0026lt; section \u0026gt;}} \r\rPage1\r\r\rPage 1\r#\r\r\rPage2\r\r\rPage 2\r#\r\r\r"}),a.add({id:51,href:'/docs/shortcodes/section/page1/',title:"Page1",section:"Section",content:"Page 1\r#\r\r"}),a.add({id:52,href:'/docs/shortcodes/section/page2/',title:"Page2",section:"Section",content:"Page 2\r#\r\r"}),a.add({id:53,href:'/docs/shortcodes/tabs/',title:"Tabs",section:"Shortcodes",content:"Tabs\r#\r\rTabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example\r#\r\rMacOS\rMacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux\rLinux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows\rWindows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n\r"})})()