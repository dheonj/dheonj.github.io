'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/profile/','title':"소개 Introduction",'content':"This is a blog. Hello. I love this steep slope (not downward :P)\n\nThank you.\n\n\nFramework: Hugo\nOriginal Theme: Book\n\r​\tHugo\n​\tGithub Page | Hugo Page\n\r\r"});index.add({'id':1,'href':'/docs/develope/','title':"개발 기록 Developer Note",'content':"글 목록 List "});index.add({'id':2,'href':'/docs/book/','title':"독후감 Book Review",'content':"글 목록 List "});index.add({'id':3,'href':'/docs/paper/','title':"아무논문 Paper Review",'content':"글 목록 List "});index.add({'id':4,'href':'/docs/','title':"Docs",'content':""});index.add({'id':5,'href':'/docs/book/200829/','title':"김지은입니다",'content':"잠깨고싶을때 읽으면 좋은 책\n시발아저씨는 쪽팔린거라도 알지,, 상고까지 꾸역꾸역했네.\n나도 한남이니 여기까지하고 걍 닥쳐야,, 성폭행 피해자의 삶은 이렇게 망가지는구나. 이런사건 있으면 남자편 안드는걸로 공식만들고 외워야겠다.\n다음은 역겨운 부분 위주로 인용\n 그 밤 오피스텔에 온 나를 보며 안희정이 말했다. “요즘 내가 미투를 보며 네게 상처가 되는 것을 알았다. 그때 괜찮았느냐.” 그리고 내 반응을 살폈다. 무슨 말을 해야 할지 몰라서 대답을 못 하고 있었다. “미안했다. 그때 너 괜찮았느냐.” 내게 다시 물었다. “지금은 괜찮으냐?” 아무 대답도 할 수 없었다. 고개만 푹 숙이고 있었다. 그러고는 “너는 미투에 대해 어떻게 생각하느냐”며 미투에 대한 내 의견을 물었다. 이어 “내가 쉴 수도 있는데 너도 따라서 쉬어라”라며 내 미래를 운운했다. 안희정은 내가 자신과 ‘공동운명체’라는 것을 대답 전에 다시금 인식시켰다. 강한 압박이 느껴졌다.“제가 감히 어떻게 미투를 하겠어요”라고 말했다. 그렇게 그는 내게서 미투를 하지 않겠다는 대답을 받아냈다. 결국 내 대답으로 나를 무기력하게 만든 후 안희정은 내게 다시 성폭행을 가했다. 도망칠 수 없었다. 덫을 놓고 먹이를 기다리는 사냥꾼1에게서 나는 옴짝달싹 못 하고 그대로 비틀려졌다.범죄가 끝나고, 새벽 2시가 넘은 늦은 시간 안희정은 내게 말했다. “아침에 아내가 오기로 했으니 청소를 하고 나가라.” 청소 도구가 어디 있는지 알려주었다. 먼지 제거 테이프로 침구를 정리했다. 내가 청소하고 있을 때 골프 채널을 보던 안희정이 빨리 안 나가고 뭐 하냐며 재촉했다. “멍 때리지 마라, 절대 기다리게 해서는 안 된다, 격식 있는 자리인지 미리 확인해라, 지위에 맞지 않는 자리를 싫어하신다, 행사 시 앉는 자리에 착석하는 끝까지 봐야 한다, 보안이 필요한 식사는 수행비서 개인 카드로 결제해라, 사우나, 미용, 마사지 등 지사의 개인 일과 비용도 수행비서 개인 사비로 써라, 지사 가족들의 비용도 수행비서가 부담한다, 현금을 넉넉히 가지고 다녀라, 한도 500만 원짜리 카드를 만들어라, 지사의 식성을 파악해라, 아주 세세한 음식 기호를 외워서 맞춰드려야 한다, 얼굴이나 이름을 못 외우니 수행비서가 보조 기억 장치로 있다가 옆에서 알려드려야 한다, 각종 신고서도 수행비서가 써서 챙겨드려라, 경제 용어도 외워라, 못 알아들으면 안 된다, KTX를 탈 때 수행비서 앞에 있는 받침대는 지사의 커피와 가방을 놓을 수 있게 펼쳐놓아라, 아메리카노에 각설탕은 1개, 시럽일 때는 2번 펌핑해야 한다, 빵을 사 오라 하면 크루아상이나 따뜻한 플레인 베이글을 사라, 크림치즈와 나이프를 같이 준비해드려라, 가끔 단 것을 찾으시면 그럴 땐 옛날 꽈배기를 사라, 우유는 예전에는 커피우유만 드셨으나 요즘에는 흰 우유를 주로 드신다, 꼭 빨대 챙겨라, 자주 부르고 자주 심부름을 시키신다, 병장을 웃기는 이등병의 마음을 가져라, 공식 일정 이후 시간, 기업, 친구, 여자 이야기는 주변에 함구하라, 특히 여자 관련해서는 인수인계서 메모에서도 삭제해라, 단어 언급조차 하지 말고 어디에 쓰지도 마라, 보고 듣고 알아도 비밀을 유지하고 반드시 함구하라, 중요하니 재차 강조한다 (…) 마지막으로 지금까지의 인수인계에서 가장 중요한 것은 ‘지사님 기분’이다, 여기에 별표 두 개를 그려라, 인수인계 사항들은 모두 지사님 기분을 맞춰드리기 위한 것이다.” 안희정의 부인이 빵이 먹고 싶다고 하면 나는 다른 사람들이 식사하는 시간에 그걸 사러 다녀왔다. 유명 빵집이 멀든 그래서 내 밥을 못 먹든 상관없이 말이다. 이런 구매에 들어가는 돈은 누구에게도 받을 수 없었다. 안희정은 성폭행을 한 후 매번 즉각 사과했다. “대통령이 되는 길이 버겁다.” “내 위치가 너무 힘들고 외로워서 그랬다.” “어린 너를 가져서 미안하다.” “내 직원에게 부끄러운 짓을 해서 미안하다.” “너는 수행비서이니 나를 이해해달라.” “너는 나의 그림자다.” “나를 끝까지 지켜달라.” “비밀을 지켜주고 함구해달라.” 성적 수발까지도 수행비서가 감내해야 할 일인 양 세뇌시켰다. “일이 되어가는 과정 중 하나일 뿐, 결과가 중요하지 지금 네가 당한 일은 아무런 문제도 아니다”라는 내용을 반복해서 들었다. “너는 나의 훌륭한 참모다.” “나는 너를 신뢰하고 의지한다.” “내가 시키는 대로만 하라.” “다시는 그러지 않겠다.” “다 잊고 씩씩하게 일하자.” “러시아와 스위스의 아름다운 풍경만 기억해라.” 그렇게 내가 성폭력을 문제 삼지 않도록 되뇌게 했다.거듭되는 사과와 이어지는 강도 높은 업무들은 다른 생각을 할 수 없도록 만들었다. 안희정은 내가 정신적으로 흐트러지는 모습이 잠깐이라도 보이면 괜찮아 보일 때까지 내내 미안하다고 했다. 그렇게 부하 직원을 성폭행하고도 맹목적인 복종을 하게 만들고, 입을 막아버렸다.성폭력과 사과는 아무렇지 않게 반복되는 연속적 일상이었다. 집무실이나 관용차 안에서는 가슴이나 허벅지 등 신체를 수시로 툭툭 치고 만졌다. 그가 차 안에서 잠을 자거나 휴식을 취할 때면 나를 옆에 앉히고 손 마사지를 시켰다. 늦은 시간 외진 장소, 화장실 앞이나 기차, 식당 안에서도 사람들의 눈을 피해 성추행은 계속됐다. “저 앞 여자 다리 예쁘지 않냐?” “모든 여자들이 나를 좋아한다.” “내가 그렇게 잘생겼니?” 그의 성추행과 성희롱은 점점 더 과감해지고 심해졌다. 안희정도 마찬가지였다. 출근을 하면 내 얼굴부터 발끝까지 몸을 위아래로 훑어보았다. 내 속눈썹을 살피기도 했고, 화장과 옷에 대해 평했다. 그들은 여전히 조직의 권력과 위계질서 속에서 살아가는 직장인이었고, 재판에 나와 증언하는 것을 부담스러워했다.이후 증인으로 나와준 사람들은 대체로 둘로 나뉜다. 자신이 겪을 어려움을 감내하면서까지 경험한 사실을 말해준 사람들과 없던 일을 증언하는 사람들이었다.전자의 증인들 중 일부는 모해위증이라는 죄목으로 안희정으로부터 고소를 당하기도 했다. 고발 이후 혐의 없음으로 처분 났다. 이후 안희정은 항고했지만 항고는 기각되었다. 어떤 증인은 증언을 하기로 한 이후 나에 대한 지라시 정보를 지속적으로 받기도 했다. 김지은이 이상한 사람이니 더 증언하지 말라는 메시지였다. 안희정은 최초 자신의 페이스북을 통해 “합의에 의한 관계가 아니었다”고 시인했다. 이후 변호사를 선임한 직후에는 “남녀 간의 애정을 기반으로 한 연인 관계였다. 연애였다”라며 입장을 번복했다. 안희정과 엘리베이터를 함께 탄 적이 있습니다. 저를 너무 빤히 쳐다봤고, ‘예쁘다’고 말하며 저의 어깨를 잡고 자신 쪽으로 끌어당겨 안았습니다. 이후에는 남성 동료들에게는 오지 않았던 개인적인 텔레그램 메시지를 받기도 했고, 공적으로 엮인 저에게 ‘아가야’라는 호칭을 사용하기도 했습니다.”“평소 저를 빤히 쳐다보거나, 손이나 손목을 잡는 일이 많았습니다. 그리고 자신의 머리 스타일을 만져달라고 하거나 자신의 옆자리에 앉으라고 말하는 경우가 종종 있어 불편했습니다. 어느 날 식사 자리에서 안희정이 저보고 옆자리에 앉으라고 했습니다. 제가 조금 긴장해서 다리를 한쪽으로 모으고 불편하게 앉았는데, 안희정이 ‘편하게 앉아’라고 말하며 제 허벅지 안쪽을 손으로 쳤습니다. ‘찰싹’ 소리가 날 정도의 터치였는데, 그 당시의 불편했던 감정이 오래 남아 있습니다.” 재판장님.피고인은 자신이 가지고 있는 권력이, 자신의 존재가 어떤 위력을 가지고 있는지 누구보다 잘 알았던 사람입니다. 그걸 통해서 갖고 싶은 것, 자기가 원하는 것을 갖는 사람이었고, 자기가 하고자 하는 건 무조건 하는 사람입니다. 피고인은 차기 대통령으로 추앙받는 그 위세와 권력을 이용해 그동안 연약하고 유약한 사람들의 노동도 착취했고, 성도 착취했고, 영혼까지 파괴했습니다. 실제로 그의 범행을 당한 피해자들은 피고인 아래 있던 직원이자 약자였고, 피고인의 힘에 대항할 수 없는 위치에 있습니다. 피고인은 누구보다 그 위계 서열을 잘 알고 있고, 그걸 이용해온 것입니다.어쩌면 그는 정신적인 문제가 있는지도 모르겠습니다. 그가 저한테 했던 말들, “나는 어떤 여자와도 잘 수 있다” “모든 여자들은 나를 좋아한다” “나는 섹스가 좋다” “내가 그렇게 잘생겼니?”라는 말, 그건 왕자병이 아니라 치료받지 못한 비정상적인 성적 욕구를 숨기지 못한 게 아닐까라는 생각도 듭니다.  "});index.add({'id':6,'href':'/docs/develope/200824/','title':"hugo 블로그 구글 서치 콘솔 등록",'content':"깃헙 블로그에 막 신나게 글을 썼는데 검색에 노출이 안되면 은근히 섭섭하다.\n뭐,, 그런것보다도 정보를 공유하려고 하는 짓들이니 구글검색에 나오도록 해야함.\nhttps://hahafamilia.github.io/howto/hugo-staticgen/ 이분 글을 참조 해서 했다 ㅇㅇㅇ 짧게 정리하면\n  블로그가 검색 노출이 되도록 설정\n# config.toml 파일에 아래 내용 추가\renableRobotsTXT = true\r[outputs]\rhome = [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;]\r[sitemap]\rchangefreq = \u0026quot;weekly\u0026quot;\rfilename = \u0026quot;sitemap.xml\u0026quot;\r  https://search.google.com/ 에 블로그 주소 등록\n  여기에서 add property하면 끝나는게 아니라,,, (오늘알았음 )\nsitemap을 등록해야 함. 구글 크롤링하는 봇한테 안녕 우리집에는 이런것들이 있는데 소문좀 내줘 하고 알려주는 역할,,\n위에서 설정한 사이트맵 등록  https://search.google.com/ 여기서 위에서 등록한 주소 선택 후 왼쪽 탭 Index \u0026gt; Sitemaps 에\nblogAddress/sitemap.xml\nblogAddress/index.xml (이게 rss인듯. 휴고는 기본적으로 만들어주나보다 짱짱)\n두개를 추가하면 된다\n"});index.add({'id':7,'href':'/docs/develope/200823/','title':"hugo 블로그 구축할때 레포가 2개 필요한 이유",'content':"휴고 블로그 구축할때 깃헙 레포가 2개 필요하다.\n하나는 블로그의 모든 소스가 들어가있는 폴더고 (hugo/blog)\n다른 하나는 거기에 있는 소스들을 publish해서 블로그로 보여줄 수 있는 형태로 바뀐 html위주 파일이 저장되는 레포 ㅇㅇㅇ (hugo/blog/public)\n그 개념을 잘 몰라서 지금까지 헷갈렸음,,\n"});index.add({'id':8,'href':'/docs/develope/200814/','title':"구글 app script 에서 installable trigger 활성화하기",'content':"구글 app script에서 기본으로 제공하는 심플 트리거는 몇가지가 있다.\n(https://developers.google.com/apps-script/guides/triggers 참조)\n파일이 열릴 때 작동하는 onOpen(e), 파일을 수정할 때마다 작동하는 onEdit(e) 등\n자세한 설명은 위의 주소에 들어가면 적혀있다. 괄호 안에 들어가 있는 e는 트리거 오브젝트라고 불르는데, 겁먹지말고 예제를 보다보면 이해가 간다.\nfunction onEdit(e) {\rvar range = e.range;\rrange.setValue(\u0026#39;Last modified: \u0026#39; + new Date());\r}\r내용을 조금 수정했는데, 이런식으로 사용한다. 사용자가 스프레드시트를 수정했을 때 트리거가 작동하고 여기서 트리거 오브젝트 e는 그 이벤트에 대한 정보를 담고있다.\n위의 예제는 뭐,,, 사용자가 어떤 셀을 수정해도 그 셀의 내용이 날짜로 바뀌겠지만 ㅋㅋㅋㅋㅋ\n여튼,, 해당 파일 내부에서만 작동하는 기능이라면 상관이 없으나, 내 경우에는 이벤트에따라서 새로운 독스 파일을 생성해줘야 한다. 이럴 때는 심플 트리거를 사용할 수 없고, installable 트리거를 사용해야 한다.\n심플트리거를 사용하지 못하는 상황은 다음 주소의 설명을 참조.\nhttps://developers.google.com/apps-script/guides/triggers/installable\n그래서 여튼, installable trigger를 활성화하는 법을 단계별로 나눠보면,\n  installable trigger를 작성한다.\n  installable trigger를 활성화한다.\n  installable trigger 작성.\n  function installable_onEdit(e) {\rvar ss = SpreadsheetApp.getActiveSpreadsheet(); var sheet = ss.getActiveSheet();\rvar target = sheet.getRange(\u0026#34;A1\u0026#34;)\rvar eventLocation = e.range.getA1Notation()\rif (!e) {\rthrow new Error(\u0026#39;Please do not run the script in the script editor window. It runs automatically when you edit the spreadsheet.\u0026#39;);\r}\rtarget.setValue(eventLocation)\r}\r스프레드시트내부를 수정할때마다, 마지막으로 수정한 위치를 A1 notation으로 바꿔서 A1에 넣어주는 함수다.\ninstallable trigger 활성화.  \rhttps://script.google.com/home 에서 현재 해당하는 프로젝트위에 마우스를 올리면 vertical ellipsis가 뜬다. 거기에서 triggers 클릭\n\r오른쪽 아래 add trigger 클릭\n\r함수이름 및 이벤트타입 (우리 경우에는 onEdit) 선택해서 save\n\r경고화면이 뜨겠지만 저 아래 Go to Untitled project (unsafe) 클릭해서 진행한다.\n\rhaha "});index.add({'id':9,'href':'/docs/develope/200812/','title':"구글 스프레드 시트 + app script 이용해서 독서 리스트 관리하기",'content':"이것은 장기 프로젝트인 거시다.\n구글 드라이브를 저장공간으로도 많이 썼지만, 스크립트를 작성해서 캘린더 일정을 스프레드시트와 연동하는 것도 만들어보고, 학과 근로 업무할때도 사용했다.\n개인적으로 독서리스트 관리 시트를 만들어서 써오다가 코드를 너무 더럽게 짜서,, 조금 개선을 시켰다.. 물론 누구의 리뷰도 받지 않았음,, (대충 더럽다는 얘기)\n리스트 관리하고 업데이트하는일이 쉬울것같은데,, 어렵더라.\n​\n먼저 인터페이스를 짜 보았다. 일단 읽을책/읽은책 리스트와 거기에 자동으로 추가/삭제하는 기능, 장르별로 대략적인 통계를 보여주는 정도로 화면구성을 했다.\n\r추가적인 기능들을 몇개 넣으려 했는데, 프리징 시킨 행이나 열 개수가 늘어날수록 아무래도 화면이 너무 답답해보여서 기본 목록 관리 기능만 적용하기로 하고 화면도 수정했다.\n\r이게 수정 후 화면. 아무래도 책 목록이 최대한 화면에 나오는게 보기에 좋더라.\n이제 이걸 바탕으로 전체적인 플로우를 짜보고 그에 맞는 함수를 작성해야한다.\n"});index.add({'id':10,'href':'/docs/book/200812/','title':"오리지널스 - 애덤 그랜트",'content':"헤어스타일이 인상적인 애덤 그랜트의 오리지널스.\n상식과 반하는 부분이 있어서 재미있게 읽었다.\n요약 (책 뒤에도 개인을 위해, 조직을 위해 등등 타겟에 따라 적용할 수 있는 매뉴얼이 있으니 참조)\n  창조적 파괴\n독창성 = 창조적 파괴 (조지프 슘페터), 기존 방식의 해체\n독창적인 사람 - 주도적으로 자기가 지닌 비전 실현, 현재 상태에 대한 호기심\n성취에 높은 가치를 부여할수록 실패를 두려워하고 독창성 감소\n위험 포트폴리오 관리 - 한 분야에서 안정감 확보하고, 다른 분야에서 독창성 발휘. 어정쩡한 양다리 X.\n사업에서도 인간관계에서도, 기업가들은 일반인보다 훨씬 더 위험 회피 성향이 강하다.\n→ 독창성 발휘에 성공한 사람: 기존 체제에 의문을 제기하며, 위험 포트폴리오를 안정적으로 운용하는 사람.\n  눈먼 열정에서 벗어나기\n아이디어 선정: 독창성의 가장 큰 장애물. 아이디어 창출이 가장 어려운 일 아님.\nFalse positive, False negative 피해야 함. 양은 질과 비례.\n아이디어 선정은 창출자의 동료집단이 할 때 독창적인 아이디어를 예측할 확률이 가장 높음. 또한 남의 아이디어 평가 전, 내가 아이디어 내봐야 확률 상승. 즉 경험을 많이 해 예측 가능한 환경의 분야에서만 직관이 맞음.\n나와 다른 문화권에서 얼마나 밀도 높게 일을 했는지.\n→ 가장 중요한 것: 아이디어에 대한 열정 X 실행의지(열정의 초점) O\n  위험을 무릅쓰다.\n기존 시스템에 반하는 의견을 경력과 인간관계를 해치지 않고 피력하는 법. 사회적 위계질서의 두 가지 측면. 권력과 지위.\n지위(타인의 존중과 선망) 없이 권한 행사하려하면 저항에 직면. 단순 기존 체제에 대한 저항 X. 기존 체제의 일부로서 안으로부터의 변화 추구.\n\r불만족스러운 상황 해결 방법 4 가지\n본인의 재량 \u0026amp; 조직에 대한 헌신의 감정에 따라 위 네가지 중 선택하게 됨. (control \u0026amp; commitment)\n→ 최선의 방법: 자기 의견을 밝히고, 필요시 탈출준비를 하면서, 위험을 안정적으로 관리. 자기검열을 덜 하고 자기 아이디어의 가치를 반복해서 익숙하게 만들기.\n  서두르면 바보\n아이디어를 실행에 옮길 시기 포착하기. 선발주자일 필요 없음. 미루기: 폭 넓은 아이디어, 즉흥적 사고를 얻을 수 있음. But 계획은 필요하다.\n*특허 관련, 네트워크 효과가 강한 분야는 선발주자가 유리\n개념적 혁신가와 실험적 혁신가. 실험적 혁신가는 시간이 오래 걸리지만, 끊임없이 새로운 아이디어를 생산한다. 시행착오와 축적된 지식.\n→ 창작하고자 하는 것이 있다면, 미리 계획을 세우기보다는 여러 잠정적 아이디어/해결책 실험. 집요하게 호기심을 발동시키고 끊임없는 시도로 강화 가능.\n  최적의 균형점과 트로이의 목마\n수평적 적대감 - 근본적 목적을 공유하지만 상대적으로 과격한 집단과 덜 과격한 집단이 있을 때 생기는 마찰.\n독창적인 사람들이 자신의 목표를 달성하려면 온건한 과격파가 되어야 함. (과격한 주장을 온건하게 전달)\n새 아이디어를 주장하는 이유에서 아이디어를 실현하는 방법 으로 초점을 전환.\n친적(관계의 부정성, 긍정성 다 높음)과는 연을 끊고 적(높은 부정성)을 내편으로 만들려 노력.\n참신함으로 시작해 익숙함을 더하기.\n  이유 있는 반항\n결과의 논리: 가장 최상의 결과를 낳는 행동\n적절성의 논리: 자신이 어떤 사람인지, 어떤 사람이 되고 싶은지를 바탕으로 행동.적절성의 논리를 따라서 행동하기.\nReasoning 기반의 훈육방법. 창의성은 비판이 많은 환경에서 자람.\n  집단 사고를 재고하라\n강력한 문화 조성을 위해 다양성을 핵심 가치에 포함.\n악마의 변호인은 지정하지 말고 찾아내야 함.\n자기 주장은 자신이 옳다는 태도로, 남의 의견 경청시에는 자신이 틀리다는 태도로.\n독창성 도입에서 멈추지 말고, 독창성을 발휘할 수 있는 문화 조성.\n  평지풍파 일으키고 평정심을 유지하기\n낙관주의: 확신이 흔들릴 때\n비관주의: 구체적 행동을 결심한 상태 (목표 달성 의지가 확고할 때)\n두 전략을 섞어서 내적 동력을 만들어야 함.\n흥분하는게 침착해지려 애쓰는 것 보다 두려움을 잘 다스림. 분노는 냉소주의를 불식한다.\n안전지대에서 몰아내기: 현 상태에 대한 분노, 불만 느낄 때.\n  "});index.add({'id':11,'href':'/docs/develope/200726/','title':"LG그램에 리눅스 20.04 설치하기",'content':"오 생각보다 간단하게 설치완료. 오류도 없이 설치해버렸으요.\n내 컴터는 lg 그램 15Z990-HA7BK에 윈도우10 설치되어있었고,\nssd는 256, 512 두개 사용중. C드라이브 (256)에 윈도우 설치. 나는 D드라이브(512)에 우분투 설치 완료.\n설치 USB 준비\n USB 포맷 (FAT32) 우분투 설치파일 (.iso) 다운로드 (오늘 날짜 기준 ubuntu-20.04-desktop-amd64.iso) 다운받은 iso파일을 etcher나 뭐 이런거 사용하지 않고 그냥 우클릭해서 usb에 압축해제  컴터 준비\n D 드라이브 포맷  설치 과정\n 재부팅 후 F2 연타 bios로 들어가서 secure boot \u0026ndash;\u0026gt; false로 설정 부팅 priority usb로 설정 usb 꼽고 재부팅하면,, 설치진행할 수 있음 파티션 나누는 부분에서 잠시 흠칫했는데, 이 블로그 보고 https://lsjsj92.tistory.com/375?category=759963 바로 해결했다.  SSD 두개일 경우 하나는 /dev/sda, 다른 하나는 /dev/sdb 이렇게 인식이 되는데 나의 경우에는 첫번째 ssd에 윈도우 설치되어있는 상태. 두번째 ssd에 우분투 설치할거니 /dev/sdb의 파티션을 나눠주면 된다. 부트로더 설치할 장치도 /dev/sdb를 선택하면 됨. /dev/sdb를 선택하고 swab(/swap) 영역이랑 home(/home), root (/)이렇게 각각 파티션 설정해주고 설치 진행하면 된다   끝. 쏘 이지,,  "});index.add({'id':12,'href':'/docs/develope/200723_b/','title':"인코딩, 디코딩 정리. 인스타그램 oembed 데이터 디코딩하기",'content':"이것도 맨날 헷갈리는 개념\n출처: https://medium.com/@chrisjune_13837/%EC%9D%B8%EC%BD%94%EB%94%A9%EA%B3%BC-%EB%94%94%EC%BD%94%EB%94%A9-87006cf8dee2\n인코딩: 문자열을 바이트로 변환\n바이트 코드는 utf-8, euc-kr, ascii 등의 형식을 가짐\n파이썬은 문자열 유니코드로 처리 ㅇㅇ\n그러므로 인코딩 (in python)\n유니코드 \u0026ndash;\u0026gt; utf-8, euc-kr, ascii 등의 byte데이터\n디코딩은 그 반대: 바이트를 문자열로 변환\nutf-8, euc-kr, ascii \u0026ndash;\u0026gt; 유니코드\n인스타그램 oembed가 리턴해주는건 json데이터인데, 이걸 모르고\n받아온 바이트데이터를 utf-8로 인코딩 euc로 인코딩해보고 인코딩한거에서 \\\\u0000 없애보고 난리부르스를,,,\njson은 그냥 json encoding을 바로 해주면 되더라. 걍 json 모듈 맡기면 됨\nhtml = http.request('GET','https://api.instagram.com/oembed/?url='+targetUrl)\rtext=html.data\rjson11 = json.loads(text)\r"});index.add({'id':13,'href':'/docs/develope/200723/','title':"hugo 명령어 정리, git 배쉬에서 .md파일 바로 실행하기",'content':"맨날 까먹어서 ㅇㅇㅇ\n자주쓰는거만 정리\n$ hugo server -D $ hugo new docs/develope/200723.md $ ./deploy.sh zzzz\n그리고 docs아래 사용하는 폴더는\nbook / develope / diary / paper\n이렇게 있음\ngit에서 방금 생성한 마크다운 파일을 바로 실행하려면 ㅇㅇㅇ\nhttps://support.typora.io/Use-Typora-From-Shell-or-cmd/\n$ start ./content/docs/develope/200723.md 크,,,\n사실 사진넣거나 이런거 아니면 거의 이정도만 쓴다,,\n그래도 start 명령어 오늘 처음 알았음\n뿌-듯\n"});index.add({'id':14,'href':'/docs/develope/200618/','title':"추천 시스템 만들기 building a recommendation system 0",'content':"sns 타임라인 피드 추천 시스템을 구현해보려고 한다.\n신문기사등 다른 url을 퍼온 포스팅을 대상으로 한다.\nA라는 기사가 있고 B라는 블로그 글이 있고 C라는 외부홈페이지 글이 있을 때,\n어떤 알고리즘으로 이 기사들을 유저들의 타임라인에 노출시킬것인가?\n그러기위해서 먼저 적절한 데이터셋을 찾아보자\n다행히 내 쓰임새와 딱 맞는 데이터를 찾았다.\n​\n데이터 가공이 먼저 필요하다.\n​\n원본 데이터는 총 2개의 파일로 구성됨.\nshared_articles : 공유된 기사에 대한 정보. url, 업로드한 사람에 대한 정보, 해당 게시물에 해당된 id, 언어 등\nusers_interactions : 어떤 유저가 어떤 게시물에 좋아요를 누르고 등등을 했는지\nshared_articles에 있는 영어 게시글만 사용하려 했고,\n그러려면 비영어 게시글에 대한 user_interactions 또한 필터링해야한다.\n먼저 csv 파일을 두개 읽어오기. 구글 검색해보면 pandas 써서 합치고 뭐 그러던데, 나는 그냥 따로 불러와서 다른 변수로 저장했다.\n\r사진은 shared_articles.csv 파일을 엑셀에서 열어본 화면이다.\n가장 첫번째 row를 header라고 칭하는 것 같다. 아무튼 나는 header 중 eventType이 content shared \u0026amp; lang의 값이 en인 아이템을 변수로 저장하려 한다. 이때 아이템의 모든 정보를 저장하는게 아니라, timestamp, contentId, authorPersonId, authorSessionId, url 의 값 정도만 담을 것임.\narticles = [] #저장할 리스트 생성\r with open(\u0026#39;./shared_articles.csv\u0026#39;,encoding=\u0026#39;utf-8\u0026#39;) as csvfile: # 파일 열기\r rdr = csv.DictReader(csvfile)\rfor i in rdr: # csv 파일을 한 줄 씩 읽을거임\r if i.pop(\u0026#39;lang\u0026#39;)==\u0026#39;en\u0026#39; and i.pop(\u0026#39;eventType\u0026#39;)==\u0026#39;CONTENT SHARED\u0026#39;: #영어, content shared 일때  j=OrderedDict({\u0026#39;timestamp\u0026#39;: i[\u0026#39;timestamp\u0026#39;],\u0026#39;contentId\u0026#39;: i[\u0026#39;contentId\u0026#39;],\u0026#39;authorPersonId\u0026#39;: i[\u0026#39;authorPersonId\u0026#39;], \u0026#39;url\u0026#39;: i[\u0026#39;url\u0026#39;]}) # 이런 값들로만 만들어진 dictionary 생성\r articles.append(j) # 방금 만든 dictionary를 리스트에 저장\r "});index.add({'id':15,'href':'/docs/paper/0608/','title':"[Psychology] Happiness is a stochastic phenomenon",'content':"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.395.1181\u0026amp;rep=rep1\u0026amp;type=pdf\n행복은 확률적인 현상이다.\n​\n일란성 쌍둥이와 이란성 쌍둥이의 주관적인 행복도를 (이쪽에서는 SWB라고 표현하는 듯. abbreviation of subjective well-being) 시간간격을 두고 설문한 결과\nheritability of the stable component of subjective well-being approaches 80%.\n​\nBTW one of people who uploaded this paper tried to cross out a sentence in conclusion like\n It may be that trying to be happier is as futile as trying to be taller and therefore is counterproductive.\n and wrote \u0026ldquo;Not true\u0026rdquo;. Think I should read the authors\u0026rsquo; work more.\n​\n그리고 저자들은\nWe argue, however, that the impetus is greater from mood to behavior than in the reverse direction.\n​\n이 논문의 저자들은 경제적 상황, 결혼상황, 직업의 만족도를 포함한 다른 요소보다 유전적인 요인이 행복에 더 큰 영향을 끼친다는 결론을 내렸다.\n​\n내 행복이 유전적으로 물려받은거라고? 뭔가 이겨내고 싶다. ㅋㅋㅋㅋ 물론 행복을 좇는 삶 같은건 추구하지 않지만,,\n다른 논문들은 어떤 주장을 할까나\n"});index.add({'id':16,'href':'/docs/develope/200604/','title':"google cloud function을 이용한 크롤러 2",'content':"이전글\n 파이썬 + request + beautifulsoup를 구글 클라우드 펑션에 구현하기\nhttps://jdh-earthling.github.io/docs/developernote/200505/\ngoogle cloud function을 이용한 크롤러\nhttps://jdh-earthling.github.io/docs/developernote/200525/\n google cloud function이 어떻게 작동하는지 대충 파악했고\nrequests도 사용할 줄 아니\n외부로부터 http요청을 받으면 http요청에 포함된 타겟url값을 가지고 크롤링을 하는 서버를 만들 수 있다 ㅇㅇ\n그러기 위해서는\n 타겟 url을 포함하는 http 요청을 서버가 읽을 수 있는 형태로 서버에 날린다. http요청을 해석하고 타겟 url 크롤링 수행 크롤링한 데이터를 return한다  ​\n짧게 기록하자면\n  request가 읽을 수 있는 형태로 http 요청 날리기\nget을 사용할 수도 있고, post를 사용할 수도 있는데 그 둘의 차이는 다음 링크에 잘 설명되어있다.\nhttps://blog.outsider.ne.kr/312\n   ​\tGET은 가져오는 것이고 POST는 수행하는 것입니다.\n ​\t라고하는데, 그렇다면 우리의 경우는 어떤걸 써야하나\n​\n​\t크롤링서버의 주소가 server.com/function이라고 했을 떄\n​\tGET을 사용할 경우 클라이언트가 요청하는 http 프로토콜은 다음과 같다.\n​\tserver.com/function?url=https://blog.ahahahah.com/blabla/21012030320\n​\t클라이언트가 받게될 정보는 실제로 위의 주소를 가진 기존에 생성된 페이지에서 오는게 아니라, 위의 http 요청에서 ?url= 뒤에있는 타겟url에서 서버가 정보를 크롤링해오는 것이기 때문에\n​\tPOST를 사용하는 것이 맞다\n​\n post로 날라온 http request에서 target url 값 읽고 크롤링\n쉬움 ㅇㅇ (해놓고보면 ㅇㅇㅇ) beautifulsoap 등 파이썬 크롤링 모듈 많으니 쓰면 됨.\n문제는 크롤링 알고리즘이랑 방법론\n  크롤링한 데이터 json으로 리턴\n파이썬 dict 사용해서 크롤링한 데이터 정리하고 그대로 리턴하면 됨다\u0026hellip;\n  "});index.add({'id':17,'href':'/docs/develope/200525/','title':"google cloud function을 이용한 크롤러",'content':"이전 글\nhttps://jdh-earthling.github.io/docs/developernote/200505/\n 함수서버 url을 server.com/function 이라고 했을때\n클라이언트가 server.com/function?url=https://blog.naver.com/blabla/21012030320\n에 접속을 하면 (요청을 하면)\n서버는 위 url 주소에 해당하는 (https://blog.naver.com/blabla/21012030320) 페이지의 이런저런 소스들을 가져온다.\n 이어서,,\ndef hello_world(request):\r\u0026#34;\u0026#34;\u0026#34;Responds to any HTTP request.\rArgs:\rrequest (flask.Request): HTTP request object.\rReturns:\rThe response text or any set of values that can be turned into a\rResponse object using\r`make_response \u0026lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response\u0026gt;`.\r\u0026#34;\u0026#34;\u0026#34;\rrequest_json = request.get_json()\rif request.args and \u0026#39;message\u0026#39; in request.args:\rreturn request.args.get(\u0026#39;message\u0026#39;)\relif request_json and \u0026#39;message\u0026#39; in request_json:\rreturn request_json[\u0026#39;message\u0026#39;]\relse:\rreturn f\u0026#39;Hello World!\u0026#39;\r중간 주석에 쓰여진대로 hello_world함수의 argument로 들어가는 request는 어딘가에서 보낸 http request object를 의미한다.\nhttp request는 대충 \u0026ldquo;나 누군데 이 url에 대한 html좀 보내봐\u0026rdquo; 정도의 메세지라고 이해하면 될 듯 싶다.\nrequest obj는 나의 자격과 + 접속하고 싶은 주소의 정보를 담고 있음.\n더 기본적으로는 접속하고 싶은 url 정보가 담겨있다.\n암튼 파이썬의 flask라는 모듈에서 html 요청을 하기 위해 request라는 클래스를 사용함.\n아무튼 예제 함수에 한줄씩 주석을 달아보았다.\ndef hello_world(request):\r\u0026#34;\u0026#34;\u0026#34;Responds to any HTTP request.\rArgs:\rrequest (flask.Request): HTTP request object.\rReturns:\rThe response text or any set of values that can be turned into a\rResponse object using\r`make_response \u0026lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response\u0026gt;`.\r\u0026#34;\u0026#34;\u0026#34;\rrequest_json = request.get_json() #json 형태로 request 가 전달될 수 있으니 json정보 추출\r if request.args and \u0026#39;message\u0026#39; in request.args: return request.args.get(\u0026#39;message\u0026#39;)\r#request의 argument 중 message 라는 애가 있으면 해당하는 key 값을 리턴\r elif request_json and \u0026#39;message\u0026#39; in request_json:\rreturn request_json[\u0026#39;message\u0026#39;] #json 형식으로 전달된 request가 message라는 name에 해당하는 key값 리턴\r else:\rreturn f\u0026#39;Hello World!\u0026#39;\r#아니면 그냥 에라 모르겠다 소리질러ㅓㅓ 반갑다 세상아\r 그렇다면 구글 클라우드 펑션 샘플 서버의 url을 server.com/function이라고 했을 때\nserver.com/function?message=lol\n을 웹브라우저에 복붙하고 엔터를 누르면 어떤 화면을 볼 수 있을까?\n는 직접 해보면 안다. lol\n"});index.add({'id':18,'href':'/docs/develope/200505/','title':"파이썬 + requests + beautifulsoup 를 구글 클라우드 펑션에 구현하기",'content':"Google cloud function을 사용해서, 크롤링 서버를 하나 만들었음.\n함수서버 url을 server.com/function 이라고 했을때\n클라이언트가 server.com/function?url=https://blog.ahahahah.com/blabla/21012030320\n에 접속을 하면 (요청을 하면)\n서버는 위 url 주소에 해당하는 (https://blog.ahahahah.com/blabla/21012030320) 페이지의 이런저런 소스들을 가져온다.\n매우 간단한 기능을 구현했음에도, 리비전 횟수가 70번에 이를만큼 삽질을 많이 해서 기록으로 남김\u0026hellip;\n누군가에게는 유용했으면 하는 마음이랄까나\n한 일 / 과정  구글 클라우드 펑션 서버를 연다. 파이썬으로 예제를 돌려봄. url에 따라서 다른 출력을 내는 것을 확인. 서버 동작 환경에 beautifulsoup 설치 bs4 사용하여 html 파싱하기. 원하는 정보 출력하기  파이썬 콘솔 사용해서 개발했음.\n하나씩 정리해보면\n1.구글 클라우드 펑션 서버 오픈 구글의 여타 다른 서비스들처럼, documentation이 엄청 잘되어있음.\nhttps://cloud.google.com/functions/docs/quickstart-python?hl=ko\n설명보고 잘 만들면 됨.\n메인 콘솔 페이지에서 그림에 표시한 부분을 누르면 함수 관리, 수정 등이 가능\n\r2. 위에서 만든 서버에 접속을 해보면 hello world가 나옴. 트리거 주소를 브라우저에 복붙하면 (또는 curl 사용하든) 반가운 hello world가 나온다\n\r여기서 샘플코드를 한번 자세히 살펴보자.\ndef hello_world(request):\r\u0026#34;\u0026#34;\u0026#34;Responds to any HTTP request.\rArgs:\rrequest (flask.Request): HTTP request object.\rReturns:\rThe response text or any set of values that can be turned into a\rResponse object using\r`make_response \u0026lt;http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response\u0026gt;`.\r\u0026#34;\u0026#34;\u0026#34;\rrequest_json = request.get_json()\rif request.args and \u0026#39;message\u0026#39; in request.args:\rreturn request.args.get(\u0026#39;message\u0026#39;)\relif request_json and \u0026#39;message\u0026#39; in request_json:\rreturn request_json[\u0026#39;message\u0026#39;]\relse:\rreturn f\u0026#39;Hello World!\u0026#39;\rrequest라는게\n위 함수는 Flask라는 거 위에서 돌아가는거 같음.\n이어서,,,\n"});index.add({'id':19,'href':'/docs/develope/gcf1/','title':"구글 클라우드 펑션",'content':"구글 클라우드 펑션을 사용중.\n친구랑 뭘 좀 만들어보려고하는데, 내 진도가 느리다.\n어떤 펑션을 돌리는 서버를 클라우드에 올리는건데 좋네. 구글은 몬하는게 뭐니.\nhttp 기본이 전혀 없어서 우격다짐으로 해보는중인데, ㅇㅇㅇ\n\u0026ldquo;서버url\u0026quot;+\u0026rdquo;?\u0026ldquo;+\u0026quot;value=\u0026quot;+\u0026quot;hahaha\u0026rdquo;\n이런식으로 url이 들어가면 서버는 이 클라이언트가 요청한 value 값에따라서 이런저런걸 처리하는거구나.\nf-string을 사용함.\ngcf에서 beautifulsoup를 import하는 방법을 찾는중이다.\n그냥 requirements.txt에 적으면 deploy는 되는데 함수 실행시 에러가 난다.\n"});index.add({'id':20,'href':'/docs/develope/insertimg/','title':"Insertimg",'content':"휴고 포스트에 이미지 넣기.\n매우 쉬웠음.\nstatic 폴더 안에 있는 이미지들은 그대로 올라감. 상대패스도 그대로.\n그래서 로고이미지의 위치가 static/logo.jpg 라면\n마크다운에 그냥 logo.jpg 넣고\n이미지가 넘 많아질것같으니 폴더에 넣어서 관리하겠어 하면 static안에 새로운 폴더를 만들어서 거기에 넣으면 상대경로를 그대로 사용 가능.\nstatic/image/1.png는 /image/1.png 라고 마크다운에 파일위치를 넣어주면 된다. 미리보기에서는 안됨 ㅍㅎㅎㅎ\n암튼 하나 했음 별거아니지만 뿌-듯\n 200814 추가\n\\image\\1.png 는 안된다!!\n헷갈리므로 조심\n"});index.add({'id':21,'href':'/docs/develope/hugo-blog/','title':"휴고 블로그 구축과정",'content':"  블로그 프레임웍 정하기\n맨처음에는 깃헙 블로그 검색하면 한글로 가장 많이 나오는 지킬로 기본 테마만 만들고 수정할 수 없어서 몇번 만들어놓기만 하고 포기\u0026hellip;\n이후 헥소라는 애를 써봄. 쉬운듯했으나 뭔가 어려웠다. 영어로 된 자료도 별로 없었음. 그래서 또 헤엄.\n휴고라는 친구를 발견. 오오. 이게 요새 핫하다 이거지. 그래 정했어.\n적용하고 코드도 뜯어보니 이게 그나마 낫다. 단순히 그동안의 시행착오가 누적되어 그런걸지도..\n  테마 정하고\nbook 이라는 테마로 정함. 깔끔하네.\n  커스토마이즈\n게시판형식+블로그형식으로 만들고 싶었는데, 만조크스럽다.\n  구글에 여러 자료가 있지만, 개인적으로는 이 글이 제일 도움이 되었음.\nhttps://github.com/Integerous/Integerous.github.io\n*https://ialy1595.github.io/post/blog-construct-2/ 여기도 설명이 잘되어있다. theme파일 내부를 수정하지 말고 override해서 쓰라는게 예의라는데,, 제송합니다. 예의도 지식이다\u0026hellip; 주륵.\n커스토마이즈하면서 헷갈렸던 사항   페이지 종류의 구분과 레이아웃 적용\n휴고 도큐멘테이션 읽어보면 section , list, post, 등등 뭐 페이지마다 구분이 있는것같은데. 아직 잘 모르겠다.\n내 블로그의 경우에는 크게\na. 메인화면 (블로그 첫화면 및 블로그 소개 페이지)\nb. 게시글 리스트 (왼쪽 글 카테고리 눌렀을때 해당 카테고리 아래 글 목록 출력)\nc. 개별 게시물\n요렇게 세 가지의 레이아웃이 필요한데 폴더트리 내부의 개별 마크다운 파일에 각각 어떤 양식이 적용되는지 몰라서 시간이 오래걸렸다.\n기본적으로 모든 게시물은 _default 폴더의 single.html 레이아웃을 적용하는 것 같고,\n그걸 휴고에서는 default 타입의 single 레이아웃을 적용했다고 표현한다.\n적용할 레이아웃 형식을 해당 마크다운 파일 앞단 front matter에 명시하면 바꿀 수 있다.\n\r위 그림에서 볼드체로 글 목록 List라고 써져있는 부분이 본문이고 그 전에 회색박스가 마크다운 파일의 기본정보를 담고있는 front matter임 ㅇㅇ. 마크다운 한정인지는 모르겠지만 여튼.\n그중에서 마지막 두개는 (type: post, layout: list)\n이 마크다운 파일을 layout 폴더의 post 폴더 안에있는 list.html 레이아웃을 사용해 페이지상에 나타내겠다~\n는 뜻임 ㅇㅇ\n  아무튼 그래서 나는\na. 메인화면 : posts/single.html\nb. 게시글 리스트: posts/list.html\nc. 개별 게시물: _default/single.html\n이렇게 적용하고, 각각의 html을 내맘에 맞게 수정했다 이거임 ㅇㅇ\n  추가작업  댓글 구글광고? ㅋㅋㅋㅋㅋㅋㅋㅋㅋ 오른쪽 공간 활용\u0026hellip; contact? 숙제처럼 남은 작업 태그걸고 옆에 표시하면 얼마나 좋아 태그 등 기능 활용 본문 다음글 이전글 ㅇㅇ theme overriding 이미지 삽입도 지금 막무가내야\u0026hellip; 폰트 변경 (noto sans)  "});index.add({'id':22,'href':'/docs/develope/yuppppp/','title':"Fiiinally",'content':"드디어 블로그 뼈대 완성쓰 했다\nFinally I finished building my blog structure using hugo :P\nTook so much energy and time.\nNow the document begins\n"});index.add({'id':23,'href':'/docs/develope/blogframework/','title':"블로그 프레임웤 정함",'content':"마침내 깃헙블로그 프레임웤을 정했음.\n지킬 \u0026ndash;\u0026gt; 헥소 \u0026ndash;\u0026gt; 휴고\n앞에 두 개는 하나도 이해할 수 없어서 너무나 막막했기에 더 쉬운 사용성을 가진 플랫폼을 찾아다녔다\n휴고는 그나마 좀 알겠다는거? 따라서 커스텀하기도 빠를것이다 하는 생각임\n그래서 무슨 내용을 어떤식으로 올릴것인가.\n나도모르오.\n"});index.add({'id':24,'href':'/docs/develope/xpath-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%97%98%EB%A6%AC%EB%A8%BC%ED%8A%B8-%EC%B0%BE%EA%B8%B0/','title':"xpath 사용해서 엘리먼트 찾기",'content':" xpath에 엘리먼트가 로딩(?) 될 때 까지 5초 기다림. 엘리먼트가 로드되면 esc 누름. 외국서버에 있는 홈페이진데 굳이 모든 요소가 로딩될때까지 기다릴 필요는 없으니 ㅇㅇ  WebDriverWait(driver, 5).until( EC.presence_of_element_located((By.XPATH , \u0026quot;\u0026quot;\u0026quot; // *[@id=\u0026quot;mainContent\u0026quot;]/div/div[1]/main/div[1]/div[1]/p \u0026quot;\u0026quot;\u0026quot;)) ) ActionChains(driver).send_keys(Keys.ESCAPE).perform() 지정한 위치(xpath)에 있는 요소를 찾음. 그리고 걔를 num_of_results라는 변수로 저장.  num_of_results= driver.find_element_by_xpath(\u0026quot;\u0026quot;\u0026quot; //*[@id=\u0026quot;mainContent\u0026quot;]/div/div[1]/main/div[1]/div[1]/p \u0026quot;\u0026quot;\u0026quot;) 2번과 같이 xpath로 엘리먼트를 찾아서 info라고 정의.  info = driver.find_element_by_xpath(\u0026quot;\u0026quot;\u0026quot;//*[@id=\u0026quot;product-description-content-8\u0026quot;]/div/div\u0026quot;\u0026quot;\u0026quot;) info라는 엘리먼트 내부(.)에서 p태그를 가진 요소'들'을 모두 찾음(//p). elements이기 때문에 serving_info는 리스트임. ㅇㅇ.  serving_info=info.find_elements_by_xpath(\u0026quot;.//p\u0026quot;) info라는 엘리먼트 내부의 테이블을 모두 찾는데(.//table) 그 테이블이 td의 child일 경우에는 제외([not(ancestor::td)])  nutritional_info=info.find_elements_by_xpath(\u0026quot;\u0026quot;\u0026quot;.//table[not(ancestor::td)]\u0026quot;\u0026quot;\u0026quot;) table이라는 엘리먼트 내부의 td태그를 가진 요소들을 모두 찾는데, 그 td가 table을 child로 가지는 경우에는 제외 ([not(child::table)])  nut_info_text = table.find_elements_by_xpath(\u0026quot;\u0026quot;\u0026quot;.//td[not(child::table)]\u0026quot;\u0026quot;\u0026quot;) "});index.add({'id':25,'href':'/docs/develope/%EB%A7%88%EC%9D%B4%ED%94%84%EB%A1%9C%ED%8B%B4-%EC%9B%B9%ED%81%AC%EB%A1%A4%EB%9F%AC/','title':"마이프로틴 웹크롤러",'content':"파이썬+셀레늄을 이용해 마이프로틴 웹사이트 크롤러를 만드는 중\n이전에도 크롤링 프로그램을 만들어본 적이 있으나 언제나 배보다 배꼽이 더 큰 느낌 LMAO\u0026hellip;\n여튼, 이전에는 마우스 좌표도 넣어주고 하는 등 매우 허섭하게 만들었던 것 같은데\n이번에는 xpath 이용해서 (제대로 된 방법인지는 모르겠으나)\n그래도 나름 요소들을 최대한 골라내어 크롤링을 하려했다.\n가장 중요한 교훈은\n첫 정보를 긁어올 때 제대로 긁어와야 그 이후 과정이 편하다는 것.\n이 테이블 값 긁어오느라 xpath 넣어줄때도 조건문도 넣고 패런츠 차일드 등등 새로운 걸 많이 알게 되었다. 어디엔가는 또 써먹을 일이 있겠지.\n찾아보면 방법이 있는게 더 신기했음.\nxpath 주소 찾아가는 법에 대해서 언제 포스팅으로 남겨야겠다.\n"});index.add({'id':26,'href':'/docs/develope/aint-easy/','title':"aint easy",'content':"building an web crawler to gather nutritional information of every products on myprotein\nexpected to finish by today, but didn\u0026rsquo;t go as scheduled, like everything else in our lives. LOL\nbut at least I\u0026rsquo;m enjoying it\n"});index.add({'id':27,'href':'/docs/develope/building-a-web-crawler/','title':"building a web crawler",'content':"파이썬으로 마이프로틴 홈페이지를 긁어서, 제품 DB를 만들고\n내가 현재 먹고있는 영양제들을 체크하면\n전체 영양소를 보여주는 걸 만들려고 한다.\n먼저 크롬 크롤러부터 구축하는중.\n이전에 학교 근로할 때 노가다가 귀찮아서 크롤러 만들었던게 도움이 된다.\n적어도 크롤링 도구를 만들 수 있다는걸 아는게 어딘지..\nBuilding a python web crawler (in chrome browser) since yesterday, to get nutrition information of every products of myprotein.\nWhen someone pick currently-taking-product among product list,\nit will display daily intake vitamins, proteins, or whatever in total. not for a single product\n"});index.add({'id':28,'href':'/docs/develope/finally/','title':"can a github blog substitute a paper note?",'content':"from what jekyll? to hexo finally.\nmuch easier to use for newbs just like me lol\nso, what do I post from now? idk\n"});index.add({'id':29,'href':'/docs/develope/haha/','title':"haha",'content':"test\n"});})();